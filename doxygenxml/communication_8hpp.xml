<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="communication_8hpp" kind="file" language="C++">
    <compoundname>communication.hpp</compoundname>
    <includes local="no">mpi.h</includes>
    <includes local="no">cereal/types/string.hpp</includes>
    <includes local="no">cereal/types/vector.hpp</includes>
    <includes local="no">cereal/types/map.hpp</includes>
    <includes local="no">cereal/archives/binary.hpp</includes>
    <includes local="no">sstream</includes>
    <includes local="no">vector</includes>
    <includes local="no">iterator</includes>
    <includes local="no">cassert</includes>
    <includes local="no">iostream</includes>
    <includes local="no">thread</includes>
    <includes local="no">chrono</includes>
    <incdepgraph>
      <node id="65">
        <label>cereal/types/map.hpp</label>
      </node>
      <node id="69">
        <label>iterator</label>
      </node>
      <node id="66">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="70">
        <label>cassert</label>
      </node>
      <node id="63">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="61">
        <label>/z/richdem/include/richdem/common/communication.hpp</label>
        <link refid="communication_8hpp"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>vector</label>
      </node>
      <node id="67">
        <label>sstream</label>
      </node>
      <node id="71">
        <label>iostream</label>
      </node>
      <node id="73">
        <label>chrono</label>
      </node>
      <node id="62">
        <label>mpi.h</label>
      </node>
      <node id="72">
        <label>thread</label>
      </node>
      <node id="64">
        <label>cereal/types/vector.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="communication_8hpp_1a0d638fe48e408fa87f9b8f86164d38b1" prot="public" static="no">
        <name>_unused</name>
        <param><defname>x</defname></param>
        <initializer>((void)x)</initializer>
        <briefdescription>
<para>Used to hide the fact that some variables are used only for assertions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="28" column="9" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t comm_count_type</definition>
        <argsstring></argsstring>
        <name>comm_count_type</name>
        <briefdescription>
<para>Data type used for storing Tx/Rx byte counts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="30" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="communication_8hpp_1a932616313a260262447f28706a400896" prot="public" static="no">
        <type>std::vector&lt; char &gt;</type>
        <definition>typedef std::vector&lt;char&gt; msg_type</definition>
        <argsstring></argsstring>
        <name>msg_type</name>
        <briefdescription>
<para>Data type for incoming/outgoing messages. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="31" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="communication_8hpp_1ac62b340e9c81eed652e6d89333d203b9" prot="public" static="yes" mutable="no">
        <type><ref refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" kindref="member">comm_count_type</ref></type>
        <definition>comm_count_type bytes_sent</definition>
        <argsstring></argsstring>
        <name>bytes_sent</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of bytes sent. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="33" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="communication_8hpp_1add181598f4ecb064bcf5de251e3cc6c6" prot="public" static="yes" mutable="no">
        <type><ref refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" kindref="member">comm_count_type</ref></type>
        <definition>comm_count_type bytes_recv</definition>
        <argsstring></argsstring>
        <name>bytes_recv</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of bytes received. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="34" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="communication_8hpp_1a548a609c3f31f1cdbcb00164ba895ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommInit</definition>
        <argsstring>(int *argc, char ***argv)</argsstring>
        <name>CommInit</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Initiate communication (wrapper for MPI_Init) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="37" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1a983d4850a07258abf98a6d3329c4dfc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="communication_8hpp_1a932616313a260262447f28706a400896" kindref="member">msg_type</ref></type>
        <definition>msg_type CommPrepare</definition>
        <argsstring>(const T *a, const U *b)</argsstring>
        <name>CommPrepare</name>
        <param>
          <type>const T *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const U *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Convert up to two objects into a combined serialized representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="43" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="43" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1ac3b5cb18bfb9efa1763ad6de3a51fcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="communication_8hpp_1a932616313a260262447f28706a400896" kindref="member">msg_type</ref></type>
        <definition>msg_type CommPrepare</definition>
        <argsstring>(const T *a, std::nullptr_t)</argsstring>
        <name>CommPrepare</name>
        <param>
          <type>const T *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
<para>Convert one object into a serialized representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="59" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1ada8e5954afd4a72b9ed8260c588aaa52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CommSend</definition>
        <argsstring>(const T *a, const U *b, int dest, int tag)</argsstring>
        <name>CommSend</name>
        <param>
          <type>const T *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const U *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Serialize and send up to two objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="65" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="65" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1a11f25dc5cd9200a2fec0226045852a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CommSend</definition>
        <argsstring>(const T *a, std::nullptr_t, int dest, int tag)</argsstring>
        <name>CommSend</name>
        <param>
          <type>const T *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>int</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Serialize and send a single object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="77" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1a349fe2ff4e4d7a5a7325560bab1ca2bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommISend</definition>
        <argsstring>(msg_type &amp;msg, int dest, int tag)</argsstring>
        <name>CommISend</name>
        <param>
          <type><ref refid="communication_8hpp_1a932616313a260262447f28706a400896" kindref="member">msg_type</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Send a pre-serialized object using non-blocking communication. </para>        </briefdescription>
        <detaileddescription>
<para>The object must be pre-serialized because the buffer containing the serialization must persist until the communication is complete. It makes more sense to manage this buffer outside of this library. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="86" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1a698b7d08413938329e2a8682f5977e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CommGetTag</definition>
        <argsstring>(int from)</argsstring>
        <name>CommGetTag</name>
        <param>
          <type>int</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Check tag of incoming message. Blocksing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="93" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1a234d18621118c6c6a10f67a19197dd97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CommRank</definition>
        <argsstring>()</argsstring>
        <name>CommRank</name>
        <briefdescription>
<para>Get my unique process identifier (i.e. rank) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="100" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="100" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1aa001fa21504d028048b23b3e827ea495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CommSize</definition>
        <argsstring>()</argsstring>
        <name>CommSize</name>
        <briefdescription>
<para>How many processes are active? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="109" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1a55b469b16b1db182b926db1061aaf378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommAbort</definition>
        <argsstring>(int errorcode)</argsstring>
        <name>CommAbort</name>
        <param>
          <type>int</type>
          <declname>errorcode</declname>
        </param>
        <briefdescription>
<para>Abort; If any process calls this it will kill all the processes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="118" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1a6fc86801f1126c6c13ad63f36be30306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CommRecv</definition>
        <argsstring>(T *a, U *b, int from)</argsstring>
        <name>CommRecv</name>
        <param>
          <type>T *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Receive up to two objects and deserialize them. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="124" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="124" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1ac67d41ec3e718f14cf228eae1e16cd0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CommRecv</definition>
        <argsstring>(T *a, std::nullptr_t, int from)</argsstring>
        <name>CommRecv</name>
        <param>
          <type>T *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>int</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Receive one object and deserialize it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="159" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1aa678bc61693466489b1e2ec3a623f10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CommBroadcast</definition>
        <argsstring>(T *datum, int root)</argsstring>
        <name>CommBroadcast</name>
        <param>
          <type>T *</type>
          <declname>datum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Broadcast a message to all of the processes. (TODO: An integer message?) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="165" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1adc5e0c013225c0f52934c9fec79febba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommFinalize</definition>
        <argsstring>()</argsstring>
        <name>CommFinalize</name>
        <briefdescription>
<para>Wrap things up politely; call this when all communication is done. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="170" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1a7257c7bf214f7fa18e32c2ca7cf6d1b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" kindref="member">comm_count_type</ref></type>
        <definition>comm_count_type CommBytesSent</definition>
        <argsstring>()</argsstring>
        <name>CommBytesSent</name>
        <briefdescription>
<para>Get the number of bytes sent by this process. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of bytes sent by this process </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="176" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1ac5f68291c7dc72da22c882400e58d491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" kindref="member">comm_count_type</ref></type>
        <definition>comm_count_type CommBytesRecv</definition>
        <argsstring>()</argsstring>
        <name>CommBytesRecv</name>
        <briefdescription>
<para>Get the number of bytes received by this process. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of bytes received by this process </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="182" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="communication_8hpp_1ae9cf9b6cb74d1d5836acf83f25b0ad0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommBytesReset</definition>
        <argsstring>()</argsstring>
        <name>CommBytesReset</name>
        <briefdescription>
<para>Reset message size statistics to zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/communication.hpp" line="187" column="1" bodyfile="/z/richdem/include/richdem/common/communication.hpp" bodystart="187" bodyend="190"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract calls to MPI, allowing for transparent serialization and communication stats. </para>    </briefdescription>
    <detaileddescription>
<para>Richard Barnes (<ulink url="mailto:rbarnes@umn.edu">rbarnes@umn.edu</ulink>), 2015 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="comment">//TODO:<sp/>Should<sp/>include<sp/>parameter<sp/>definitions<sp/>for<sp/>all<sp/>of<sp/>these.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_communication_hpp_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_communication_hpp_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mpi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cereal/types/string.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cereal/types/vector.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cereal/types/map.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cereal/archives/binary.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//For<sp/>non-busy<sp/>looping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="communication_8hpp_1a0d638fe48e408fa87f9b8f86164d38b1" refkind="member"><highlight class="preprocessor">#define<sp/>_unused(x)<sp/>((void)x)<sp/>//TODO:<sp/>May<sp/>want<sp/>to<sp/>use<sp/>&quot;throw&quot;<sp/>instead<sp/>since<sp/>failed<sp/>communication<sp/>is<sp/>bad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" kindref="member">comm_count_type</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31" refid="communication_8hpp_1a932616313a260262447f28706a400896" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;char&gt;<sp/><ref refid="communication_8hpp_1a932616313a260262447f28706a400896" kindref="member">msg_type</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" kindref="member">comm_count_type</ref><sp/>bytes_sent<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" kindref="member">comm_count_type</ref><sp/>bytes_recv<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="communication_8hpp_1a548a609c3f31f1cdbcb00164ba895ad7" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a548a609c3f31f1cdbcb00164ba895ad7" kindref="member">CommInit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***argv){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>MPI_Init(argc,argv);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="43" refid="communication_8hpp_1a983d4850a07258abf98a6d3329c4dfc3" refkind="member"><highlight class="normal"><ref refid="communication_8hpp_1a932616313a260262447f28706a400896" kindref="member">msg_type</ref><sp/><ref refid="communication_8hpp_1a983d4850a07258abf98a6d3329c4dfc3" kindref="member">CommPrepare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U*<sp/>b){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::vector&lt;char&gt;<sp/>omsg;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss(std::stringstream::in|std::stringstream::out|std::stringstream::binary);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>ss.unsetf(std::ios_base::skipws);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>cereal::BinaryOutputArchive<sp/>archive(ss);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>archive(*a);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>archive(*b);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>std::copy(std::istream_iterator&lt;char&gt;(ss),<sp/>std::istream_iterator&lt;char&gt;(),<sp/>std::back_inserter(omsg));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>omsg;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="59" refid="communication_8hpp_1ac3b5cb18bfb9efa1763ad6de3a51fcda" refkind="member"><highlight class="normal"><ref refid="communication_8hpp_1a932616313a260262447f28706a400896" kindref="member">msg_type</ref><sp/><ref refid="communication_8hpp_1a983d4850a07258abf98a6d3329c4dfc3" kindref="member">CommPrepare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/>std::nullptr_t){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a983d4850a07258abf98a6d3329c4dfc3" kindref="member">CommPrepare</ref>(a,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="65" refid="communication_8hpp_1ada8e5954afd4a72b9ed8260c588aaa52" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1ada8e5954afd4a72b9ed8260c588aaa52" kindref="member">CommSend</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U*<sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>omsg<sp/>=<sp/><ref refid="communication_8hpp_1a983d4850a07258abf98a6d3329c4dfc3" kindref="member">CommPrepare</ref>(a,b);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>bytes_sent<sp/>+=<sp/>omsg.size();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>MPI_Send(omsg.data(),<sp/>omsg.size(),<sp/>MPI_BYTE,<sp/>dest,<sp/>tag,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assert(ret==MPI_SUCCESS);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="communication_8hpp_1a0d638fe48e408fa87f9b8f86164d38b1" kindref="member">_unused</ref>(ret);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="77" refid="communication_8hpp_1a11f25dc5cd9200a2fec0226045852a81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1ada8e5954afd4a72b9ed8260c588aaa52" kindref="member">CommSend</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/>std::nullptr_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="communication_8hpp_1ada8e5954afd4a72b9ed8260c588aaa52" kindref="member">CommSend</ref>(a,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>dest,<sp/>tag);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="communication_8hpp_1a349fe2ff4e4d7a5a7325560bab1ca2bd" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a349fe2ff4e4d7a5a7325560bab1ca2bd" kindref="member">CommISend</ref>(<ref refid="communication_8hpp_1a932616313a260262447f28706a400896" kindref="member">msg_type</ref><sp/>&amp;msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>MPI_Request<sp/>request;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>bytes_sent<sp/>+=<sp/>msg.size();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>MPI_Isend(msg.data(),<sp/>msg.size(),<sp/>MPI_BYTE,<sp/>dest,<sp/>tag,<sp/>MPI_COMM_WORLD,<sp/>&amp;request);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="communication_8hpp_1a698b7d08413938329e2a8682f5977e90" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a698b7d08413938329e2a8682f5977e90" kindref="member">CommGetTag</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>MPI_Status<sp/>status;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>MPI_Probe(from,<sp/>MPI_ANY_TAG,<sp/>MPI_COMM_WORLD,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status.MPI_TAG;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="communication_8hpp_1a234d18621118c6c6a10f67a19197dd97" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a234d18621118c6c6a10f67a19197dd97" kindref="member">CommRank</ref>(){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>MPI_Comm_rank(MPI_COMM_WORLD,<sp/>&amp;rank);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>assert(ret==MPI_SUCCESS);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="communication_8hpp_1a0d638fe48e408fa87f9b8f86164d38b1" kindref="member">_unused</ref>(ret);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="communication_8hpp_1aa001fa21504d028048b23b3e827ea495" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1aa001fa21504d028048b23b3e827ea495" kindref="member">CommSize</ref>(){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>MPI_Comm_size<sp/>(MPI_COMM_WORLD,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>assert(ret==MPI_SUCCESS);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="communication_8hpp_1a0d638fe48e408fa87f9b8f86164d38b1" kindref="member">_unused</ref>(ret);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="communication_8hpp_1a55b469b16b1db182b926db1061aaf378" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a55b469b16b1db182b926db1061aaf378" kindref="member">CommAbort</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errorcode){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>MPI_Abort(MPI_COMM_WORLD,<sp/>errorcode);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="124" refid="communication_8hpp_1a6fc86801f1126c6c13ad63f36be30306" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a6fc86801f1126c6c13ad63f36be30306" kindref="member">CommRecv</ref>(T*<sp/>a,<sp/>U*<sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>MPI_Status<sp/>status;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from==-1)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>=<sp/>MPI_ANY_SOURCE;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>MPI_Probe(from,<sp/>MPI_ANY_TAG,<sp/>MPI_COMM_WORLD,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msg_size;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>MPI_Get_count(&amp;status,<sp/>MPI_BYTE,<sp/>&amp;msg_size);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss(std::stringstream::in|std::stringstream::out|std::stringstream::binary);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>ss.unsetf(std::ios_base::skipws);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>buffer<sp/>to<sp/>hold<sp/>the<sp/>incoming<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(msg_size);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>assert(buf!=NULL);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>MPI_Recv(buf,<sp/>msg_size,<sp/>MPI_BYTE,<sp/>from,<sp/>MPI_ANY_TAG,<sp/>MPI_COMM_WORLD,<sp/>MPI_STATUS_IGNORE);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>bytes_recv<sp/>+=<sp/>msg_size;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>ss.write(buf,msg_size);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>free(buf);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>cereal::BinaryInputArchive<sp/>archive(ss);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>archive(*a);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>archive(*b);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="159" refid="communication_8hpp_1ac67d41ec3e718f14cf228eae1e16cd0f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1a6fc86801f1126c6c13ad63f36be30306" kindref="member">CommRecv</ref>(T*<sp/>a,<sp/>std::nullptr_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="communication_8hpp_1a6fc86801f1126c6c13ad63f36be30306" kindref="member">CommRecv</ref>(a,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>from);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="165" refid="communication_8hpp_1aa678bc61693466489b1e2ec3a623f10e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1aa678bc61693466489b1e2ec3a623f10e" kindref="member">CommBroadcast</ref>(T<sp/>*datum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>root){</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>MPI_Bcast(datum,<sp/>1,<sp/>MPI_INT,<sp/>root,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="communication_8hpp_1adc5e0c013225c0f52934c9fec79febba" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1adc5e0c013225c0f52934c9fec79febba" kindref="member">CommFinalize</ref>(){</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>MPI_Finalize();</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="communication_8hpp_1a7257c7bf214f7fa18e32c2ca7cf6d1b9" refkind="member"><highlight class="normal"><ref refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" kindref="member">comm_count_type</ref><sp/><ref refid="communication_8hpp_1a7257c7bf214f7fa18e32c2ca7cf6d1b9" kindref="member">CommBytesSent</ref>(){</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bytes_sent;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="communication_8hpp_1ac5f68291c7dc72da22c882400e58d491" refkind="member"><highlight class="normal"><ref refid="communication_8hpp_1a9a7c47d8ca8fd3a991b1bd0f21f20ebf" kindref="member">comm_count_type</ref><sp/><ref refid="communication_8hpp_1ac5f68291c7dc72da22c882400e58d491" kindref="member">CommBytesRecv</ref>(){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bytes_recv;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="communication_8hpp_1ae9cf9b6cb74d1d5836acf83f25b0ad0e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="communication_8hpp_1ae9cf9b6cb74d1d5836acf83f25b0ad0e" kindref="member">CommBytesReset</ref>(){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>bytes_recv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>bytes_sent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/z/richdem/include/richdem/common/communication.hpp"/>
  </compounddef>
</doxygen>
