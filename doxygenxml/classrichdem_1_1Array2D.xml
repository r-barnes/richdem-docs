<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classrichdem_1_1Array2D" kind="class" language="C++" prot="public">
    <compoundname>richdem::Array2D</compoundname>
    <includes refid="Array2D_8hpp" local="no">Array2D.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1a0bfb96a9ffe2a20e53241ac7b5d73b39" prot="private" static="no" mutable="no">
        <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
        <definition>xy_t richdem::Array2D&lt; T &gt;::view_xoff</definition>
        <argsstring></argsstring>
        <name>view_xoff</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A rectangular subregion of a larger raster can be extracted. These variables store the offsets of this subregion in case the subregion needs to be saved into a raster with other subregions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="116" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1ab26940a23b9f9f59feffa3cb917536ee" prot="private" static="no" mutable="no">
        <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
        <definition>xy_t richdem::Array2D&lt; T &gt;::view_yoff</definition>
        <argsstring></argsstring>
        <name>view_yoff</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="117" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t richdem::Array2D&lt; T &gt;::xy_t</definition>
        <argsstring></argsstring>
        <name>xy_t</name>
        <briefdescription>
<para>xy-addressing data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="94" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t richdem::Array2D&lt; T &gt;::i_t</definition>
        <argsstring></argsstring>
        <name>i_t</name>
        <briefdescription>
<para>i-addressing data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="95" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1a5be102099f10c85498753a2e2b58943a" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string richdem::Array2D&lt; T &gt;::filename</definition>
        <argsstring></argsstring>
        <name>filename</name>
        <briefdescription>
<para>File, if any, from which the data was loaded. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="86" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1af11077fd74c421f9c44b2526532032f7" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string richdem::Array2D&lt; T &gt;::basename</definition>
        <argsstring></argsstring>
        <name>basename</name>
        <briefdescription>
<para>Filename without path or extension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="87" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1a9d20128cc08bddb3a9abde87f83b6c94" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; richdem::Array2D&lt; T &gt;::geotransform</definition>
        <argsstring></argsstring>
        <name>geotransform</name>
        <briefdescription>
<para>Geotransform of the raster. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="88" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1a307eeb12fe318485694245293715eb0a" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string richdem::Array2D&lt; T &gt;::projection</definition>
        <argsstring></argsstring>
        <name>projection</name>
        <briefdescription>
<para>Projection of the raster. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="89" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1a8f8e1a249f95b716acf3ed3f46bd2727" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; richdem::Array2D&lt; T &gt;::metadata</definition>
        <argsstring></argsstring>
        <name>metadata</name>
        <briefdescription>
<para>Raster&apos;s metadata in key-value pairs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="90" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1a301fb3841e3968ddd623129e2e8bdb95" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
        <definition>const i_t richdem::Array2D&lt; T &gt;::NO_I</definition>
        <argsstring></argsstring>
        <name>NO_I</name>
        <initializer>= std::numeric_limits&lt;<ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref>&gt;::<ref refid="classrichdem_1_1Array2D_1ae70941b33bafded93cf902039176ea79" kindref="member">max</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="97" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classrichdem_1_1Array2D_1a335c96c00a46d6b064b5af268ae03e42" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class Array2D</definition>
        <argsstring></argsstring>
        <name>Array2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="100" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1a53bd8742a711fc25e68cbf04ed8b42ba" prot="private" static="no" mutable="no">
        <type>std::array&lt; int, 9 &gt;</type>
        <definition>std::array&lt;int, 9&gt; richdem::Array2D&lt; T &gt;::_nshift</definition>
        <argsstring></argsstring>
        <name>_nshift</name>
        <briefdescription>
<para>Offset to neighbouring cells;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="102" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1ac31a1d103abc98b35036a1d41458a89f" prot="private" static="no" mutable="no">
        <type><ref refid="classrichdem_1_1ManagedVector" kindref="compound">ManagedVector</ref>&lt; T &gt;</type>
        <definition>ManagedVector&lt;T&gt; richdem::Array2D&lt; T &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Holds the raster data in a 1D array this improves caching versus a 2D array </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="104" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1a05b4f36ef8eedd8dad058fe27835d1dc" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T richdem::Array2D&lt; T &gt;::no_data</definition>
        <argsstring></argsstring>
        <name>no_data</name>
        <briefdescription>
<para>NoData value of the raster. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="107" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1aa8413c89286ee876bdbb0e9793ca579a" prot="private" static="no" mutable="yes">
        <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
        <definition>i_t richdem::Array2D&lt; T &gt;::num_data_cells</definition>
        <argsstring></argsstring>
        <name>num_data_cells</name>
        <initializer>= NO_I</initializer>
        <briefdescription>
<para>Number of cells which are not NoData. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="108" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1ad211be87f0d3c1c3636077da2c654984" prot="private" static="no" mutable="no">
        <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
        <definition>xy_t richdem::Array2D&lt; T &gt;::view_width</definition>
        <argsstring></argsstring>
        <name>view_width</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Height of raster in cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="110" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1af32b79c4532e66c02beca2c3bde2ca4d" prot="private" static="no" mutable="no">
        <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
        <definition>xy_t richdem::Array2D&lt; T &gt;::view_height</definition>
        <argsstring></argsstring>
        <name>view_height</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Width of raster in cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="111" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrichdem_1_1Array2D_1a7279a13a2e1eb62ae300e79c90f73c8d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::from_cache</definition>
        <argsstring></argsstring>
        <name>from_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If TRUE, <ref refid="classrichdem_1_1Array2D_1a7e766a4b52d54748ef341c6c53f8c63b" kindref="member">loadData()</ref> loads data from the cache assuming the Native format. Otherwise, it assumes it is loading from a GDAL file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="122" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrichdem_1_1Array2D_1adb08b9d4dc6282bdd434d0d0eb151ae6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::saveToCache</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>saveToCache</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Saves raster to a simply-structure file on disk, possibly using compression. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="post"><para>Using <ref refid="classrichdem_1_1Array2D_1a7e766a4b52d54748ef341c6c53f8c63b" kindref="member">loadData()</ref> after running this function will result in data being loaded from the cache, rather than the original file (if any). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="201" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="201" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a86f1c59bca6e9aebaef57684fca70db7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::loadNative</definition>
        <argsstring>(const std::string &amp;filename, bool load_data=true)</argsstring>
        <name>loadNative</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>load_data</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>TODO. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="235" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="235" bodyend="268"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a3cd2e58b109d06c22fe7289b82d5c11c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>richdem::Array2D&lt; T &gt;::Array2D</definition>
        <argsstring>()</argsstring>
        <name>Array2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="271" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="271" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a761396d221d7291556c4d8c55dc47848" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>richdem::Array2D&lt; T &gt;::Array2D</definition>
        <argsstring>(xy_t width, xy_t height, const T &amp;val=T())</argsstring>
        <name>Array2D</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Creates a raster of the specified dimensions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the raster </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the raster </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value of all the raster&apos;s cells. Defaults to the <ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref> template type&apos;s default value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="285" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="285" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a1d590bcacc7559187afea1968b4162cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>richdem::Array2D&lt; T &gt;::Array2D</definition>
        <argsstring>(T *data0, const xy_t width, const xy_t height)</argsstring>
        <name>Array2D</name>
        <param>
          <type>T *</type>
          <declname>data0</declname>
        </param>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Wraps a flat array in an <ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>Wraps a flat array in an <ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref> object. The <ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref> does not take ownership of the data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data0</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to wrap </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="299" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="299" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a148d77b06c27ecaee1609dd62e9aba35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>richdem::Array2D&lt; T &gt;::Array2D</definition>
        <argsstring>(const Array2D&lt; U &gt; &amp;other, const T &amp;val=T())</argsstring>
        <name>Array2D</name>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>&lt; U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Create a raster with the same properties and dimensions as another raster. No data is copied between the two. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>Raster whose properties and dimensions should be copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value of all the raster&apos;s cells. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="316" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="316" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a25d4416bab099b3d84b5323cc6fadf90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>richdem::Array2D&lt; T &gt;::Array2D</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>Array2D</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="328" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a1b3a7a505460f34b3afc3081e5bb12f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>richdem::Array2D&lt; T &gt;::Array2D</definition>
        <argsstring>(const std::string &amp;filename, bool native, xy_t xOffset=0, xy_t yOffset=0, xy_t part_width=0, xy_t part_height=0, bool exact=false, bool load_data=true)</argsstring>
        <name>Array2D</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>native</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>xOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>yOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>part_width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>part_height</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>exact</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>load_data</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>TODO. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="331" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="331" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a4698388929ac68a9d773fbcb098b1396" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::setCacheFilename</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>setCacheFilename</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="343" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="343" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1aa3007abe1173f11a4d4d61ec0ec01987" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::dumpData</definition>
        <argsstring>()</argsstring>
        <name>dumpData</name>
        <briefdescription>
<para>Caches the raster data and all its properties to disk. Data is then purged from RAM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="post"><para>Calls to <ref refid="classrichdem_1_1Array2D_1a7e766a4b52d54748ef341c6c53f8c63b" kindref="member">loadData()</ref> after this will result in data being loaded from the cache. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="354" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a7e766a4b52d54748ef341c6c53f8c63b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::loadData</definition>
        <argsstring>()</argsstring>
        <name>loadData</name>
        <briefdescription>
<para>Loads data from disk into RAM. </para>        </briefdescription>
        <detaileddescription>
<para>If <ref refid="classrichdem_1_1Array2D_1aa3007abe1173f11a4d4d61ec0ec01987" kindref="member">dumpData()</ref> has been previously called, data is loaded from the cache; otherwise, it is loaded from a GDAL file. No data is loaded if data is already present in RAM. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="366" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="366" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1aabd697e3bd2323b724814cbd7a4e30aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* richdem::Array2D&lt; T &gt;::getData</definition>
        <argsstring>()</argsstring>
        <name>getData</name>
        <briefdescription>
<para>Returns a pointer to the internal data array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="393" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="393" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
        <definition>i_t richdem::Array2D&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Number of cells in the DEM. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="396" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="396" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
        <definition>xy_t richdem::Array2D&lt; T &gt;::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <briefdescription>
<para>Width of the raster. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="399" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="399" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
        <definition>xy_t richdem::Array2D&lt; T &gt;::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <briefdescription>
<para>Height of the raster. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="402" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="402" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ae005cc46a59116f73d140ac14d5488e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
        <definition>xy_t richdem::Array2D&lt; T &gt;::viewXoff</definition>
        <argsstring>() const</argsstring>
        <name>viewXoff</name>
        <briefdescription>
<para>X-Offset of this subregion of whatever raster we loaded from. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="405" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="405" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a7881aac04d3ae1595dfe225822eb8a9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
        <definition>xy_t richdem::Array2D&lt; T &gt;::viewYoff</definition>
        <argsstring>() const</argsstring>
        <name>viewYoff</name>
        <briefdescription>
<para>Y-Offset of this subregion of whatever raster we loaded from. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="408" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="408" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1add549f66e781b7a1e786e8d1104a0f09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns TRUE if no data is present in RAM. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="411" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="411" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a80cb5415f73417724bb7fee3da21303a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T richdem::Array2D&lt; T &gt;::noData</definition>
        <argsstring>() const</argsstring>
        <name>noData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the NoData value of the raster. Cells equal to this value sould generally not be used in calculations. But note that the <ref refid="classrichdem_1_1Array2D_1a2d89b410c05e05e7586bda960f4fafac" kindref="member">isNoData()</ref> method is a much better choice for testing whether a cell is NoData or not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="416" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="416" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ac26c2f3badff22a291a612009244200c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T richdem::Array2D&lt; T &gt;::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <briefdescription>
<para>Finds the minimum value of the raster, ignoring NoData cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="419" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="419" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ae70941b33bafded93cf902039176ea79" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T richdem::Array2D&lt; T &gt;::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <briefdescription>
<para>Finds the maximum value of the raster, ignoring NoData cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="430" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="430" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a2889163cf327d0a6fc35642c9dad0928" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::replace</definition>
        <argsstring>(const T oldval, const T newval)</argsstring>
        <name>replace</name>
        <param>
          <type>const T</type>
          <declname>oldval</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>newval</declname>
        </param>
        <briefdescription>
<para>Replace one cell value with another throughout the raster. Can operate on NoData cells. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">oldval</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be replaced </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newval</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to replace &apos;oldval&apos; with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="447" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="447" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1aa378b43240a65521db793d3abcc9d251" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
        <definition>i_t richdem::Array2D&lt; T &gt;::countval</definition>
        <argsstring>(const T val) const</argsstring>
        <name>countval</name>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Counts the number of occurrences of a particular value in the raster. Can operate on NoData cells. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be be counted</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of times &apos;val&apos; appears in the raster. Will be 0 if raster is not loaded in RAM. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="462" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="462" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a31d15a5b376d57f2763849aa97798673" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
        <definition>i_t richdem::Array2D&lt; T &gt;::i0</definition>
        <argsstring>() const</argsstring>
        <name>i0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="472" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="472" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a9405a874e0e6e8745eec19c191f92ce7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::iToxy</definition>
        <argsstring>(const i_t i, xy_t &amp;x, xy_t &amp;y) const</argsstring>
        <name>iToxy</name>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Convert from index coordinates to x,y coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of i </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate of i </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="483" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
        <definition>i_t richdem::Array2D&lt; T &gt;::xyToI</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>xyToI</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Convert from x,y coordinates to index coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate to convert</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the index coordinate i of (x,y) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="496" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="496" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a2f3777d7d025150940044de05b78657c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
        <definition>i_t richdem::Array2D&lt; T &gt;::nToI</definition>
        <argsstring>(i_t i, xy_t dx, xy_t dy) const</argsstring>
        <name>nToI</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>dy</declname>
        </param>
        <briefdescription>
<para>Given a cell identified by an i-coordinate, return the i-coordinate of the neighbour identified by dx,dy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>i-coordinate of cell whose neighbour needs to be identified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dx</parametername>
</parameternamelist>
<parameterdescription>
<para>x-displacement of the neighbour from i </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dy</parametername>
</parameternamelist>
<parameterdescription>
<para>y-displacement of the neighbour from i</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>i-coordinate of the neighbour. Usually referred to as &apos;ni&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="510" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="510" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a87d2eb11c2403184eed1c00803252380" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
        <definition>i_t richdem::Array2D&lt; T &gt;::getN</definition>
        <argsstring>(i_t i, uint8_t n) const</argsstring>
        <name>getN</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Given a cell identified by an i-coordinate, return the i-coordinate of the neighbour identified by n. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>i-coordinate of cell whose neighbour needs to be identified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Neighbour to be identified</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>i-coordinate of the neighbour. Usually referred to as &apos;ni&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="527" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="527" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ae3b8fe4e4eca43b6c5d0a173af238a84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int richdem::Array2D&lt; T &gt;::nshift</definition>
        <argsstring>(const uint8_t n) const</argsstring>
        <name>nshift</name>
        <param>
          <type>const uint8_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return the offset of the neighbour cell identified by n. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Neighbour for which offset should be retrieved</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Offset of the neighbour n </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="543" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="543" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a59f8c3c430d4a88772cd40ebccaded11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::operator==</definition>
        <argsstring>(const Array2D&lt; T &gt; &amp;o) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>&lt; T &gt; &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Determine if two rasters are equivalent based on dimensions, NoData value, and their data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="552" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="552" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a2d89b410c05e05e7586bda960f4fafac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isNoData</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isNoData</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Whether or not a cell is NoData using x,y coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of cell to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate of cell to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns TRUE if the cell is NoData </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="571" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="571" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1acaa72479b0c3c611e8762ee64efeaaa2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isNoData</definition>
        <argsstring>(i_t i) const</argsstring>
        <name>isNoData</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Whether or not a cell is NoData using i coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>i-coordinate of cell to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns TRUE if the cell is NoData </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="584" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="584" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1aaea204e9cb9d9663a00c6d4911dbafed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::flipVert</definition>
        <argsstring>()</argsstring>
        <name>flipVert</name>
        <briefdescription>
<para>Flips the raster from top to bottom. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="592" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="592" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a5bfd9ca5e365960be0971c5b904cbccd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::flipHorz</definition>
        <argsstring>()</argsstring>
        <name>flipHorz</name>
        <briefdescription>
<para>Flips the raster from side-to-side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="601" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="601" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a689b51dff70e674f35d2624c8d84700a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::transpose</definition>
        <argsstring>()</argsstring>
        <name>transpose</name>
        <briefdescription>
<para>Flips the raster about its diagonal axis, like a matrix tranpose. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="616" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="616" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1abf160c36c4e75a94e959c0e77472989c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::inGrid</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>inGrid</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether a cell lies within the boundaries of the raster. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of cell to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate of cell to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if cell lies within the raster </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="634" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="634" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a0d245ac081a32e941191149031558e8e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isEdgeCell</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isEdgeCell</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether a cell lies on the boundary of the raster. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of cell to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of cell to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if cell lies on the raster&apos;s boundary </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="659" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="659" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1afd028c2d49f45bfc0974f5ae0e83452c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isTopLeft</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isTopLeft</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Determines whether an (x,y) pair is the top left of the DEM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the (x,y) pair is the top left of the DEM; otherwise, false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="665" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="665" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a8a2aa1e0f5db61e06fc69f8551652c05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isTopRight</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isTopRight</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Determines whether an (x,y) pair is the top right of the DEM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the (x,y) pair is the top right of the DEM; otherwise, false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="668" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="668" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a3a86cbdbdc7f70fee0e9436b0972b431" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isBottomLeft</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isBottomLeft</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Determines whether an (x,y) pair is the bottom left of the DEM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the (x,y) pair is the bottom left of the DEM; otherwise, false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="671" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="671" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1adfe6bb9a8defab262aec8c8bafc9d780" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isBottomRight</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isBottomRight</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Determines whether an (x,y) pair is the bottom right of the DEM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the (x,y) pair is the bottom right of the DEM; otherwise, false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="674" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="674" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a8bd97837e201f46929de98733027118e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isTopRow</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isTopRow</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Determines whether an (x,y) pair is in the top row of the DEM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the (x,y) pair is in the top row of the DEM; otherwise, false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="678" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="678" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a234360f3e3f805e5ed7ef5102b7af5cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isBottomRow</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isBottomRow</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Determines whether an (x,y) pair is in the bottom row of the DEM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the (x,y) pair is in the bottom row of the DEM; otherwise, false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="681" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="681" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a6112a72471f0c1bf68c68bfabbe59af0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isLeftCol</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isLeftCol</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Determines whether an (x,y) pair is in the left column of the DEM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the (x,y) pair is in the left column of the DEM; otherwise, false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="684" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="684" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ad33b684114d99deb09706c169ec413d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isRightCol</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>isRightCol</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Determines whether an (x,y) pair is in the right column of the DEM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the (x,y) pair is in the right column of the DEM; otherwise, false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="687" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="687" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1aa27ebf4ce083ee507aa896c440fc4f67" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::isEdgeCell</definition>
        <argsstring>(i_t i) const</argsstring>
        <name>isEdgeCell</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Test whether a cell lies on the boundary of the raster. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>i-coordinate of cell to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if cell lies on the raster&apos;s boundary </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="696" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="696" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a4fa61164507a4b9215e10102337bd784" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::setNoData</definition>
        <argsstring>(const T &amp;ndval)</argsstring>
        <name>setNoData</name>
        <param>
          <type>const T &amp;</type>
          <declname>ndval</declname>
        </param>
        <briefdescription>
<para>Sets the NoData value of the raster. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ndval</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to change NoData to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="707" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="707" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ac4557b9827f5cdb390697611c4a64b2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::setAll</definition>
        <argsstring>(const T val)</argsstring>
        <name>setAll</name>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets all of the raster&apos;s cells to &apos;val&apos;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to change the cells to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="716" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="716" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::resize</definition>
        <argsstring>(const xy_t width0, const xy_t height0, const T &amp;val0=T())</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>width0</declname>
        </param>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>height0</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val0</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Resize the raster. Note: this clears all the raster&apos;s data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">width0</parametername>
</parameternamelist>
<parameterdescription>
<para>New width of the raster </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height0</parametername>
</parameternamelist>
<parameterdescription>
<para>New height of the raster </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val0</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set all the cells to. Defaults to the raster&apos;s template type default value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="729" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="729" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a0f30210a07b4e4456a1480c1420347a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::resize</definition>
        <argsstring>(const Array2D&lt; U &gt; &amp;other, const T &amp;val=T())</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>&lt; U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="748" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="748" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1accac03eeaa78b7fdffc1d205df0eea27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::expand</definition>
        <argsstring>(xy_t new_width, xy_t new_height, const T val)</argsstring>
        <name>expand</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>new_width</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>new_height</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Makes a raster larger and retains the raster&apos;s old data, similar to resize. </para>        </briefdescription>
        <detaileddescription>
<para>Note: Using this command requires RAM equal to the sum of the old raster and the new raster. The old raster is placed in the upper-left of the new raster.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">new_width</parametername>
</parameternamelist>
<parameterdescription>
<para>New width of the raster. Must be &gt;= the old width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">new_height</parametername>
</parameternamelist>
<parameterdescription>
<para>New height of the raster. Must be &gt;= the old height. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set the new cells to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="765" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="765" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a7952f4d55b0c3d4eb3a07c53ee216f2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::countDataCells</definition>
        <argsstring>() const</argsstring>
        <name>countDataCells</name>
        <briefdescription>
<para>Counts the number of cells which are not NoData. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="793" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="793" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ac6e1f8d41a25c5dabfbe82483f5dec90" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
        <definition>i_t richdem::Array2D&lt; T &gt;::numDataCells</definition>
        <argsstring>() const</argsstring>
        <name>numDataCells</name>
        <briefdescription>
<para>Returns the number of cells which are not NoData. May count them. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns the number of cells which are not NoData. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="805" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="805" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a5853fbe67189c15a11d962607f05d0cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; richdem::Array2D&lt; T &gt;::operator()</definition>
        <argsstring>(i_t i)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return cell value based on i-coordinate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>i-coordinate of cell whose data should be fetched.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the cell identified by &apos;i&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="818" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="818" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ae8d34b43a02ca85c0d29497b6833d1ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T richdem::Array2D&lt; T &gt;::operator()</definition>
        <argsstring>(i_t i) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return cell value based on i-coordinate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>i-coordinate of cell whose data should be fetched.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the cell identified by &apos;i&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="831" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="831" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a3038dcec904dee5d9eaa760c7326f04b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; richdem::Array2D&lt; T &gt;::operator()</definition>
        <argsstring>(xy_t x, xy_t y)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return cell value based on x,y coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of cell whose data should be fetched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate of cell whose data should be fetched.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the cell identified by x,y </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="845" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="845" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a17d5c67b382a19d1ef2030e64d058878" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T richdem::Array2D&lt; T &gt;::operator()</definition>
        <argsstring>(xy_t x, xy_t y) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return cell value based on x,y coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of cell whose data should be fetched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate of cell whose data should be fetched.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the cell identified by x,y </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="861" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="861" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1abc210a9b2a1d59cceb4018cd2256356d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; richdem::Array2D&lt; T &gt;::topRow</definition>
        <argsstring>() const</argsstring>
        <name>topRow</name>
        <briefdescription>
<para>Returns a copy of the top row of the raster. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A vector containing a copy of the top row of the raster </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="874" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="874" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a9ac61a350f4f349480280832f755c8a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; richdem::Array2D&lt; T &gt;::bottomRow</definition>
        <argsstring>() const</argsstring>
        <name>bottomRow</name>
        <briefdescription>
<para>Returns a copy of the bottom row of the raster. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A vector containing a copy of the bottom row of the raster </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="883" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="883" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a4f48cfe4696c64a7d4129ae8a9d6e6f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; richdem::Array2D&lt; T &gt;::leftColumn</definition>
        <argsstring>() const</argsstring>
        <name>leftColumn</name>
        <briefdescription>
<para>Returns a copy of the left column of the raster. </para>        </briefdescription>
        <detaileddescription>
<para>Top to bottom is reoriented as left to right.</para><para><simplesect kind="return"><para>A vector containing a copy of the left column of the raster </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="894" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="894" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a423ac5ee3aaa60210250970af2909ba0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; richdem::Array2D&lt; T &gt;::rightColumn</definition>
        <argsstring>() const</argsstring>
        <name>rightColumn</name>
        <briefdescription>
<para>Returns a copy of the right column of the raster. </para>        </briefdescription>
        <detaileddescription>
<para>Top to bottom is reoriented as left to right.</para><para><simplesect kind="return"><para>A vector containing a copy of the right column of the raster </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="905" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="905" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ae1e38dacbe0c9c19a011bcc6e3b8008f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::setRow</definition>
        <argsstring>(xy_t y, const T &amp;val)</argsstring>
        <name>setRow</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets an entire row of a raster to a given value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the row to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="915" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="915" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a82d17862c97bf7009650cbe7c8c2fb07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::setCol</definition>
        <argsstring>(xy_t x, const T &amp;val)</argsstring>
        <name>setCol</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets an entire column of a raster to a given value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the column to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="926" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="926" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ae566470fdd3726b00a6bea17d47f1b80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; richdem::Array2D&lt; T &gt;::getRowData</definition>
        <argsstring>(xy_t y) const</argsstring>
        <name>getRowData</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns a copy of an arbitrary row of the raster. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to retrieve</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing a copy of the selected row </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="938" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="938" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a7744909fe63a6fde0f764ff3f73de1de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; richdem::Array2D&lt; T &gt;::getColData</definition>
        <argsstring>(xy_t x) const</argsstring>
        <name>getColData</name>
        <param>
          <type><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns a copy of an arbitrary column of the raster. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to retrieve</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing a copy of the selected column </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="949" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="949" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1aacd29d414b7407af6b29bd1f4bb92a7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clears all raster data from RAM. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="957" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="957" bodyend="959"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a096db974fe765563929ee9802a37ec3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::templateCopy</definition>
        <argsstring>(const Array2D&lt; U &gt; &amp;other)</argsstring>
        <name>templateCopy</name>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>&lt; U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copies the geotransform, projection, and basename of another raster. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>Raster to copy from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="967" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="967" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a163be51f60e717d0a24a823463bf09a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::printStamp</definition>
        <argsstring>(int size, std::string msg=&quot;&quot;) const</argsstring>
        <name>printStamp</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Output a square of cells useful for determining raster orientation. </para>        </briefdescription>
        <detaileddescription>
<para>This method prints out a square block of cells whose upper-left corner is the (integer-division) center of the raster.</para><para>Stamps are only shown if the SHOW_STAMPS preprocessor variable is set.</para><para>Since algorithms may have to flip rasters horizontally or vertically before manipulating them, it is important that all algorithms work on data in the same orientation. This method, used in testing, helps a user ensure that their algorithm is orientating data correctly.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stamp will be size x size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to print prior to the stamp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="1075" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="1075" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a5df6c0fe188199febdc7ebb3e8936773" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::printBlock</definition>
        <argsstring>(const int radius, const xy_t x0, const xy_t y0, bool color=false, const std::string msg=&quot;&quot;) const</argsstring>
        <name>printBlock</name>
        <param>
          <type>const int</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref></type>
          <declname>y0</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>color</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>msg</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Prints a square of cells centered at x,y. Useful for debugging. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stamp will be 2*radius x 2*radius </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x0</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of block center </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y0</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate of block center </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">color</parametername>
</parameternamelist>
<parameterdescription>
<para>Print the (x,y) cell in colour? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print above the block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="1110" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="1110" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1aa75024bda64d01337f7c9cad997b70d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::printAll</definition>
        <argsstring>(const std::string msg=&quot;&quot;) const</argsstring>
        <name>printAll</name>
        <param>
          <type>const std::string</type>
          <declname>msg</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Prints the entire array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print above the block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="1136" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="1136" bodyend="1145"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a96b0d0765e87542c9138b7cd29449ea3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double richdem::Array2D&lt; T &gt;::getCellArea</definition>
        <argsstring>() const</argsstring>
        <name>getCellArea</name>
        <briefdescription>
<para>Get the area of an individual cell in square projection units. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The area of the cell in square projection units </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="1152" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="1152" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a33fb7dde408a1d4a49f6411417b4d725" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double richdem::Array2D&lt; T &gt;::getCellLengthX</definition>
        <argsstring>() const</argsstring>
        <name>getCellLengthX</name>
        <briefdescription>
<para>Get the length of a cell along the raster&apos;s horizontal axis. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The length of the cell along the raster&apos;s horizontal axis </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="1161" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="1161" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a826b748b165583ae5d19aef06b8cbaf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double richdem::Array2D&lt; T &gt;::getCellLengthY</definition>
        <argsstring>() const</argsstring>
        <name>getCellLengthY</name>
        <briefdescription>
<para>Get the length of a cell along the raster&apos;s horizontal axis. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The length of the cell along the raster&apos;s horizontal axis </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="1170" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="1170" bodyend="1173"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1ad5b05b04051fb953d6c40e9453d60fc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void richdem::Array2D&lt; T &gt;::scale</definition>
        <argsstring>(const double x)</argsstring>
        <name>scale</name>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Multiplies the entire array by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to multiply array by </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="1180" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="1180" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="classrichdem_1_1Array2D_1a1304aae0fa0f05ea01fc700d8c90dbbe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool richdem::Array2D&lt; T &gt;::owned</definition>
        <argsstring>() const</argsstring>
        <name>owned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="1187" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="1187" bodyend="1189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class to hold and manipulate GDAL and native rasters. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Richard Barnes (<ulink url="mailto:rbarnes@umn.edu">rbarnes@umn.edu</ulink>)</para></simplesect>
<ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref> manages a two-dimensional raster dataset. Passed a request to load such data, it peeks at the file header and can either load data on construction or wait until a later point. It can also offload data to disk.</para><para><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref> permits simple copy construction as well as templated copies, which transfer projections and geotransforms, but not the actual data. This is useful for say, create a flow directions raster which is homologous to a DEM.</para><para><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref> implements two addressing schemes: &quot;xy&quot; and &quot;i&quot;. All methods are available in each scheme; users may use whichever is convenient. The xy-scheme accesses raster cells by their xy-coordinates. The i-scheme accesses cells by their address in a flat array. Internally, xy-addresses are converted to i-addresses. i-addressing is frequently faster because it reduces the space needed to store coordinates and requires no addressing mathematics; however, xy-addressing may be more intuitive. It is suggested to develop algorithms using xy-addressing and then convert them to i-addressing if additional speed is desired. The results of the two versions can then be compared against each other to verify that using i-addressing has not introduced any errors. </para>    </detaileddescription>
    <location file="/z/richdem/include/richdem/common/Array2D.hpp" line="84" column="1" bodyfile="/z/richdem/include/richdem/common/Array2D.hpp" bodystart="84" bodyend="1190"/>
    <listofallmembers>
      <member refid="classrichdem_1_1Array2D_1a53bd8742a711fc25e68cbf04ed8b42ba" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>_nshift</name></member>
      <member refid="classrichdem_1_1Array2D_1a335c96c00a46d6b064b5af268ae03e42" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>Array2D</name></member>
      <member refid="classrichdem_1_1Array2D_1a3cd2e58b109d06c22fe7289b82d5c11c" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>Array2D</name></member>
      <member refid="classrichdem_1_1Array2D_1a761396d221d7291556c4d8c55dc47848" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>Array2D</name></member>
      <member refid="classrichdem_1_1Array2D_1a1d590bcacc7559187afea1968b4162cd" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>Array2D</name></member>
      <member refid="classrichdem_1_1Array2D_1a148d77b06c27ecaee1609dd62e9aba35" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>Array2D</name></member>
      <member refid="classrichdem_1_1Array2D_1a25d4416bab099b3d84b5323cc6fadf90" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>Array2D</name></member>
      <member refid="classrichdem_1_1Array2D_1a1b3a7a505460f34b3afc3081e5bb12f2" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>Array2D</name></member>
      <member refid="classrichdem_1_1Array2D_1af11077fd74c421f9c44b2526532032f7" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>basename</name></member>
      <member refid="classrichdem_1_1Array2D_1a9ac61a350f4f349480280832f755c8a9" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>bottomRow</name></member>
      <member refid="classrichdem_1_1Array2D_1aacd29d414b7407af6b29bd1f4bb92a7a" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>clear</name></member>
      <member refid="classrichdem_1_1Array2D_1a7952f4d55b0c3d4eb3a07c53ee216f2a" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>countDataCells</name></member>
      <member refid="classrichdem_1_1Array2D_1aa378b43240a65521db793d3abcc9d251" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>countval</name></member>
      <member refid="classrichdem_1_1Array2D_1ac31a1d103abc98b35036a1d41458a89f" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>data</name></member>
      <member refid="classrichdem_1_1Array2D_1aa3007abe1173f11a4d4d61ec0ec01987" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>dumpData</name></member>
      <member refid="classrichdem_1_1Array2D_1add549f66e781b7a1e786e8d1104a0f09" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>empty</name></member>
      <member refid="classrichdem_1_1Array2D_1accac03eeaa78b7fdffc1d205df0eea27" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>expand</name></member>
      <member refid="classrichdem_1_1Array2D_1a5be102099f10c85498753a2e2b58943a" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>filename</name></member>
      <member refid="classrichdem_1_1Array2D_1a5bfd9ca5e365960be0971c5b904cbccd" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>flipHorz</name></member>
      <member refid="classrichdem_1_1Array2D_1aaea204e9cb9d9663a00c6d4911dbafed" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>flipVert</name></member>
      <member refid="classrichdem_1_1Array2D_1a7279a13a2e1eb62ae300e79c90f73c8d" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>from_cache</name></member>
      <member refid="classrichdem_1_1Array2D_1a9d20128cc08bddb3a9abde87f83b6c94" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>geotransform</name></member>
      <member refid="classrichdem_1_1Array2D_1a96b0d0765e87542c9138b7cd29449ea3" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>getCellArea</name></member>
      <member refid="classrichdem_1_1Array2D_1a33fb7dde408a1d4a49f6411417b4d725" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>getCellLengthX</name></member>
      <member refid="classrichdem_1_1Array2D_1a826b748b165583ae5d19aef06b8cbaf6" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>getCellLengthY</name></member>
      <member refid="classrichdem_1_1Array2D_1a7744909fe63a6fde0f764ff3f73de1de" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>getColData</name></member>
      <member refid="classrichdem_1_1Array2D_1aabd697e3bd2323b724814cbd7a4e30aa" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>getData</name></member>
      <member refid="classrichdem_1_1Array2D_1a87d2eb11c2403184eed1c00803252380" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>getN</name></member>
      <member refid="classrichdem_1_1Array2D_1ae566470fdd3726b00a6bea17d47f1b80" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>getRowData</name></member>
      <member refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>height</name></member>
      <member refid="classrichdem_1_1Array2D_1a31d15a5b376d57f2763849aa97798673" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>i0</name></member>
      <member refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>i_t</name></member>
      <member refid="classrichdem_1_1Array2D_1abf160c36c4e75a94e959c0e77472989c" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>inGrid</name></member>
      <member refid="classrichdem_1_1Array2D_1a3a86cbdbdc7f70fee0e9436b0972b431" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isBottomLeft</name></member>
      <member refid="classrichdem_1_1Array2D_1adfe6bb9a8defab262aec8c8bafc9d780" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isBottomRight</name></member>
      <member refid="classrichdem_1_1Array2D_1a234360f3e3f805e5ed7ef5102b7af5cf" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isBottomRow</name></member>
      <member refid="classrichdem_1_1Array2D_1a0d245ac081a32e941191149031558e8e" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isEdgeCell</name></member>
      <member refid="classrichdem_1_1Array2D_1aa27ebf4ce083ee507aa896c440fc4f67" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isEdgeCell</name></member>
      <member refid="classrichdem_1_1Array2D_1a6112a72471f0c1bf68c68bfabbe59af0" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isLeftCol</name></member>
      <member refid="classrichdem_1_1Array2D_1a2d89b410c05e05e7586bda960f4fafac" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isNoData</name></member>
      <member refid="classrichdem_1_1Array2D_1acaa72479b0c3c611e8762ee64efeaaa2" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isNoData</name></member>
      <member refid="classrichdem_1_1Array2D_1ad33b684114d99deb09706c169ec413d6" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isRightCol</name></member>
      <member refid="classrichdem_1_1Array2D_1afd028c2d49f45bfc0974f5ae0e83452c" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isTopLeft</name></member>
      <member refid="classrichdem_1_1Array2D_1a8a2aa1e0f5db61e06fc69f8551652c05" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isTopRight</name></member>
      <member refid="classrichdem_1_1Array2D_1a8bd97837e201f46929de98733027118e" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>isTopRow</name></member>
      <member refid="classrichdem_1_1Array2D_1a9405a874e0e6e8745eec19c191f92ce7" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>iToxy</name></member>
      <member refid="classrichdem_1_1Array2D_1a4f48cfe4696c64a7d4129ae8a9d6e6f0" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>leftColumn</name></member>
      <member refid="classrichdem_1_1Array2D_1a7e766a4b52d54748ef341c6c53f8c63b" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>loadData</name></member>
      <member refid="classrichdem_1_1Array2D_1a86f1c59bca6e9aebaef57684fca70db7" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>loadNative</name></member>
      <member refid="classrichdem_1_1Array2D_1ae70941b33bafded93cf902039176ea79" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>max</name></member>
      <member refid="classrichdem_1_1Array2D_1a8f8e1a249f95b716acf3ed3f46bd2727" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>metadata</name></member>
      <member refid="classrichdem_1_1Array2D_1ac26c2f3badff22a291a612009244200c" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>min</name></member>
      <member refid="classrichdem_1_1Array2D_1a05b4f36ef8eedd8dad058fe27835d1dc" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>no_data</name></member>
      <member refid="classrichdem_1_1Array2D_1a301fb3841e3968ddd623129e2e8bdb95" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>NO_I</name></member>
      <member refid="classrichdem_1_1Array2D_1a80cb5415f73417724bb7fee3da21303a" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>noData</name></member>
      <member refid="classrichdem_1_1Array2D_1ae3b8fe4e4eca43b6c5d0a173af238a84" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>nshift</name></member>
      <member refid="classrichdem_1_1Array2D_1a2f3777d7d025150940044de05b78657c" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>nToI</name></member>
      <member refid="classrichdem_1_1Array2D_1aa8413c89286ee876bdbb0e9793ca579a" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>num_data_cells</name></member>
      <member refid="classrichdem_1_1Array2D_1ac6e1f8d41a25c5dabfbe82483f5dec90" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>numDataCells</name></member>
      <member refid="classrichdem_1_1Array2D_1a5853fbe67189c15a11d962607f05d0cb" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>operator()</name></member>
      <member refid="classrichdem_1_1Array2D_1ae8d34b43a02ca85c0d29497b6833d1ad" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>operator()</name></member>
      <member refid="classrichdem_1_1Array2D_1a3038dcec904dee5d9eaa760c7326f04b" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>operator()</name></member>
      <member refid="classrichdem_1_1Array2D_1a17d5c67b382a19d1ef2030e64d058878" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>operator()</name></member>
      <member refid="classrichdem_1_1Array2D_1a59f8c3c430d4a88772cd40ebccaded11" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>operator==</name></member>
      <member refid="classrichdem_1_1Array2D_1a1304aae0fa0f05ea01fc700d8c90dbbe" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>owned</name></member>
      <member refid="classrichdem_1_1Array2D_1aa75024bda64d01337f7c9cad997b70d0" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>printAll</name></member>
      <member refid="classrichdem_1_1Array2D_1a5df6c0fe188199febdc7ebb3e8936773" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>printBlock</name></member>
      <member refid="classrichdem_1_1Array2D_1a163be51f60e717d0a24a823463bf09a8" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>printStamp</name></member>
      <member refid="classrichdem_1_1Array2D_1a307eeb12fe318485694245293715eb0a" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>projection</name></member>
      <member refid="classrichdem_1_1Array2D_1a2889163cf327d0a6fc35642c9dad0928" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>replace</name></member>
      <member refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>resize</name></member>
      <member refid="classrichdem_1_1Array2D_1a0f30210a07b4e4456a1480c1420347a9" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>resize</name></member>
      <member refid="classrichdem_1_1Array2D_1a423ac5ee3aaa60210250970af2909ba0" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>rightColumn</name></member>
      <member refid="classrichdem_1_1Array2D_1adb08b9d4dc6282bdd434d0d0eb151ae6" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>saveToCache</name></member>
      <member refid="classrichdem_1_1Array2D_1ad5b05b04051fb953d6c40e9453d60fc5" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>scale</name></member>
      <member refid="classrichdem_1_1Array2D_1ac4557b9827f5cdb390697611c4a64b2d" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>setAll</name></member>
      <member refid="classrichdem_1_1Array2D_1a4698388929ac68a9d773fbcb098b1396" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>setCacheFilename</name></member>
      <member refid="classrichdem_1_1Array2D_1a82d17862c97bf7009650cbe7c8c2fb07" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>setCol</name></member>
      <member refid="classrichdem_1_1Array2D_1a4fa61164507a4b9215e10102337bd784" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>setNoData</name></member>
      <member refid="classrichdem_1_1Array2D_1ae1e38dacbe0c9c19a011bcc6e3b8008f" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>setRow</name></member>
      <member refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>size</name></member>
      <member refid="classrichdem_1_1Array2D_1a096db974fe765563929ee9802a37ec3e" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>templateCopy</name></member>
      <member refid="classrichdem_1_1Array2D_1abc210a9b2a1d59cceb4018cd2256356d" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>topRow</name></member>
      <member refid="classrichdem_1_1Array2D_1a689b51dff70e674f35d2624c8d84700a" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>transpose</name></member>
      <member refid="classrichdem_1_1Array2D_1af32b79c4532e66c02beca2c3bde2ca4d" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>view_height</name></member>
      <member refid="classrichdem_1_1Array2D_1ad211be87f0d3c1c3636077da2c654984" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>view_width</name></member>
      <member refid="classrichdem_1_1Array2D_1a0bfb96a9ffe2a20e53241ac7b5d73b39" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>view_xoff</name></member>
      <member refid="classrichdem_1_1Array2D_1ab26940a23b9f9f59feffa3cb917536ee" prot="private" virt="non-virtual"><scope>richdem::Array2D</scope><name>view_yoff</name></member>
      <member refid="classrichdem_1_1Array2D_1ae005cc46a59116f73d140ac14d5488e7" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>viewXoff</name></member>
      <member refid="classrichdem_1_1Array2D_1a7881aac04d3ae1595dfe225822eb8a9b" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>viewYoff</name></member>
      <member refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>width</name></member>
      <member refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>xy_t</name></member>
      <member refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" prot="public" virt="non-virtual"><scope>richdem::Array2D</scope><name>xyToI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
