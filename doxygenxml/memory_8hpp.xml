<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="memory_8hpp" kind="file" language="C++">
    <compoundname>memory.hpp</compoundname>
    <includes local="no">fstream</includes>
    <includes local="no">string</includes>
    <includedby refid="richdem_8hpp" local="yes">/z/richdem/include/richdem/richdem.hpp</includedby>
    <incdepgraph>
      <node id="211">
        <label>string</label>
      </node>
      <node id="210">
        <label>fstream</label>
      </node>
      <node id="209">
        <label>/z/richdem/include/richdem/common/memory.hpp</label>
        <link refid="memory_8hpp"/>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="213">
        <label>/z/richdem/include/richdem/richdem.hpp</label>
        <link refid="richdem_8hpp_source"/>
      </node>
      <node id="212">
        <label>/z/richdem/include/richdem/common/memory.hpp</label>
        <link refid="memory_8hpp"/>
        <childnode refid="213" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacerichdem">richdem</innernamespace>
    <briefdescription>
<para>Defines functions for calculating memory usage. </para>    </briefdescription>
    <detaileddescription>
<para>Richard Barnes (<ulink url="mailto:rbarnes@umn.edu">rbarnes@umn.edu</ulink>), 2015 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#ifndef<sp/>_memory_hpp_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_memory_hpp_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerichdem" kindref="compound">richdem</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="memory_8hpp_1a8ddab201c8162bc55035dd612bbb67d9" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memory_8hpp_1a8ddab201c8162bc55035dd612bbb67d9" kindref="member">ProcessMemUsage</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;vmpeak,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;vmhwm){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(__linux__)<sp/>||<sp/>defined(__linux)<sp/>||<sp/>defined(linux)<sp/>||<sp/>defined(__gnu_linux__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>vmpeak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>vmhwm<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>fin(</highlight><highlight class="stringliteral">&quot;/proc/self/status&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fin.good())</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!vmpeak<sp/>||<sp/>!vmhwm){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!getline(fin,line)){<sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>we<sp/>could<sp/>still<sp/>read<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(line.compare(0,7,</highlight><highlight class="stringliteral">&quot;VmPeak:&quot;</highlight><highlight class="normal">)==0){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Peak<sp/>virtual<sp/>memory<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmpeak<sp/>=<sp/>std::stoi(line.substr(7));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}<sp/>else<sp/>if(line.compare(0,7,&quot;VmSize:&quot;)==0){<sp/>//Virtual<sp/>memory<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cerr&lt;&lt;&quot;T:<sp/>&quot;&lt;&lt;line.substr(7,10)&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>vmsize<sp/>=<sp/>std::stoi(line.substr(7,10));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}<sp/>else<sp/>if(line.compare(0,6,&quot;VmRSS:&quot;)==0){<sp/><sp/>//Resident<sp/>set<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cerr&lt;&lt;&quot;T:<sp/>&quot;&lt;&lt;line.substr(7,10)&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>vmrss<sp/>=<sp/>std::stoi(line.substr(7,10));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(line.compare(0,6,</highlight><highlight class="stringliteral">&quot;VmHWM:&quot;</highlight><highlight class="normal">)==0){<sp/><sp/></highlight><highlight class="comment">//Peak<sp/>resident<sp/>set<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmhwm<sp/>=<sp/>std::stoi(line.substr(6));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>message(&quot;Cannot<sp/>check<sp/>memory<sp/>statistics<sp/>for<sp/>this<sp/>OS.&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/z/richdem/include/richdem/common/memory.hpp"/>
  </compounddef>
</doxygen>
