<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="Array2D_8hpp" kind="file" language="C++">
    <compoundname>Array2D.hpp</compoundname>
    <includes refid="gdal_8hpp" local="yes">gdal.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">cassert</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">limits</includes>
    <includes local="no">ctime</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">map</includes>
    <includes refid="logger_8hpp" local="yes">richdem/common/logger.hpp</includes>
    <includes refid="version_8hpp" local="yes">richdem/common/version.hpp</includes>
    <includes refid="constants_8hpp" local="yes">richdem/common/constants.hpp</includes>
    <includes refid="ManagedVector_8hpp" local="yes">richdem/common/ManagedVector.hpp</includes>
    <includedby refid="Barnes2014_8hpp" local="yes">/z/richdem/include/richdem/depressions/Barnes2014.hpp</includedby>
    <includedby refid="Lindsay2016_8hpp" local="yes">/z/richdem/include/richdem/depressions/Lindsay2016.hpp</includedby>
    <includedby refid="depressions_2main_8cpp" local="yes">/z/richdem/include/richdem/depressions/main.cpp</includedby>
    <includedby refid="Zhou2016_8hpp" local="yes">/z/richdem/include/richdem/depressions/Zhou2016.hpp</includedby>
    <includedby refid="garbrecht_8hpp" local="yes">/z/richdem/include/richdem/flats/garbrecht.hpp</includedby>
    <includedby refid="flats_2main_8cpp" local="yes">/z/richdem/include/richdem/flats/main.cpp</includedby>
    <includedby refid="d8__flowdirs_8hpp" local="yes">/z/richdem/include/richdem/flowmet/d8_flowdirs.hpp</includedby>
    <includedby refid="dinf__flowdirs_8hpp" local="yes">/z/richdem/include/richdem/flowmet/dinf_flowdirs.hpp</includedby>
    <includedby refid="Fairfield1991_8hpp" local="yes">/z/richdem/include/richdem/flowmet/Fairfield1991.hpp</includedby>
    <includedby refid="Freeman1991_8hpp" local="yes">/z/richdem/include/richdem/flowmet/Freeman1991.hpp</includedby>
    <includedby refid="Holmgren1994_8hpp" local="yes">/z/richdem/include/richdem/flowmet/Holmgren1994.hpp</includedby>
    <includedby refid="OCallaghan1984_8hpp" local="yes">/z/richdem/include/richdem/flowmet/OCallaghan1984.hpp</includedby>
    <includedby refid="Quinn1991_8hpp" local="yes">/z/richdem/include/richdem/flowmet/Quinn1991.hpp</includedby>
    <includedby refid="Tarboton1997_8hpp" local="yes">/z/richdem/include/richdem/flowmet/Tarboton1997.hpp</includedby>
    <includedby refid="d8__methods_8hpp" local="yes">/z/richdem/include/richdem/methods/d8_methods.hpp</includedby>
    <includedby refid="dinf__methods_8hpp" local="yes">/z/richdem/include/richdem/methods/dinf_methods.hpp</includedby>
    <includedby refid="flow__accumulation__generic_8hpp" local="no">/z/richdem/include/richdem/methods/flow_accumulation_generic.hpp</includedby>
    <includedby refid="terrain__attributes_8hpp" local="yes">/z/richdem/include/richdem/methods/terrain_attributes.hpp</includedby>
    <includedby refid="misc__methods_8hpp" local="yes">/z/richdem/include/richdem/misc/misc_methods.hpp</includedby>
    <includedby refid="richdem_8hpp" local="yes">/z/richdem/include/richdem/richdem.hpp</includedby>
    <includedby refid="A2Array2D_8hpp" local="yes">/z/richdem/include/richdem/tiled/A2Array2D.hpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>iomanip</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="6">
        <label>cassert</label>
      </node>
      <node id="9">
        <label>stdexcept</label>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="0">
        <label>/z/richdem/include/richdem/common/Array2D.hpp</label>
        <link refid="Array2D_8hpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>map</label>
      </node>
      <node id="12">
        <label>unordered_set</label>
      </node>
      <node id="4">
        <label>fstream</label>
      </node>
      <node id="8">
        <label>typeinfo</label>
      </node>
      <node id="17">
        <label>richdem/common/version.hpp</label>
        <link refid="version_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ctime</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="19">
        <label>richdem/common/ManagedVector.hpp</label>
        <link refid="ManagedVector_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>gdal.hpp</label>
        <link refid="gdal_8hpp_source"/>
      </node>
      <node id="18">
        <label>richdem/common/constants.hpp</label>
        <link refid="constants_8hpp"/>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
      <node id="20">
        <label>memory</label>
      </node>
      <node id="14">
        <label>richdem/common/logger.hpp</label>
        <link refid="logger_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="39">
        <label>/z/richdem/include/richdem/methods/d8_methods.hpp</label>
        <link refid="d8__methods_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>/z/richdem/include/richdem/tiled/A2Array2D.hpp</label>
        <link refid="A2Array2D_8hpp"/>
      </node>
      <node id="43">
        <label>/z/richdem/include/richdem/misc/misc_methods.hpp</label>
        <link refid="misc__methods_8hpp"/>
      </node>
      <node id="23">
        <label>/z/richdem/include/richdem/depressions/depressions.hpp</label>
        <link refid="depressions_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>/z/richdem/include/richdem/flowmet/OCallaghan1984.hpp</label>
        <link refid="OCallaghan1984_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>/z/richdem/include/richdem/methods/flow_accumulation_generic.hpp</label>
        <link refid="flow__accumulation__generic_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>/z/richdem/include/richdem/flowmet/Freeman1991.hpp</label>
        <link refid="Freeman1991_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>/z/richdem/include/richdem/common/Array2D.hpp</label>
        <link refid="Array2D_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>/z/richdem/include/richdem/depressions/Zhou2016.hpp</label>
        <link refid="Zhou2016_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>/z/richdem/include/richdem/flowmet/Quinn1991.hpp</label>
        <link refid="Quinn1991_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>/z/richdem/include/richdem/flats/flat_resolution_dinf.hpp</label>
        <link refid="flat__resolution__dinf_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>/z/richdem/include/richdem/methods/dinf_methods.hpp</label>
        <link refid="dinf__methods_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>/z/richdem/include/richdem/flowmet/d8_flowdirs.hpp</label>
        <link refid="d8__flowdirs_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>/z/richdem/include/richdem/methods/flow_accumulation.hpp</label>
        <link refid="flow__accumulation_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>/z/richdem/include/richdem/depressions/Lindsay2016.hpp</label>
        <link refid="Lindsay2016_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>/z/richdem/include/richdem/flats/garbrecht.hpp</label>
        <link refid="garbrecht_8hpp_source"/>
      </node>
      <node id="29">
        <label>/z/richdem/include/richdem/flats/flat_resolution.hpp</label>
        <link refid="flat__resolution_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>/z/richdem/include/richdem/flowmet/Tarboton1997.hpp</label>
        <link refid="Tarboton1997_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>/z/richdem/include/richdem/richdem.hpp</label>
        <link refid="richdem_8hpp_source"/>
      </node>
      <node id="42">
        <label>/z/richdem/include/richdem/methods/terrain_attributes.hpp</label>
        <link refid="terrain__attributes_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>/z/richdem/include/richdem/depressions/Barnes2014.hpp</label>
        <link refid="Barnes2014_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>/z/richdem/include/richdem/flowmet/dinf_flowdirs.hpp</label>
        <link refid="dinf__flowdirs_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>/z/richdem/include/richdem/flowmet/Holmgren1994.hpp</label>
        <link refid="Holmgren1994_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>/z/richdem/include/richdem/flowmet/Fairfield1991.hpp</label>
        <link refid="Fairfield1991_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classrichdem_1_1Array2D" prot="public">richdem::Array2D</innerclass>
    <innernamespace refid="namespacerichdem">richdem</innernamespace>
    <briefdescription>
<para>Defines a 2D array object with many convenient methods for working with raster data, along with several functions for checking file data types. </para>    </briefdescription>
    <detaileddescription>
<para>Richard Barnes (<ulink url="mailto:rbarnes@umn.edu">rbarnes@umn.edu</ulink>), 2015 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#ifndef<sp/>_richdem_array_2d_hpp_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_richdem_array_2d_hpp_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gdal.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Used<sp/>for<sp/>timestamping<sp/>output<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//For<sp/>printStamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;richdem/common/logger.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="version_8hpp" kindref="compound">richdem/common/version.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="constants_8hpp" kindref="compound">richdem/common/constants.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;richdem/common/ManagedVector.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//These<sp/>enable<sp/>compression<sp/>in<sp/>the<sp/>loadNative()<sp/>and<sp/>saveNative()<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_COMPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iostreams/filtering_stream.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iostreams/filter/zlib.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerichdem" kindref="compound">richdem</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">std::map&lt;std::string,<sp/>std::string&gt;<sp/>ProcessMetadata(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**metadata){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(metadata==NULL)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>metstri=0;metadata[metstri]==NULL;metstri++){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>metstr<sp/>=<sp/>metadata[metstri];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>equals<sp/><sp/>=<sp/>metstr.find(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(equals==std::string::npos){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RDLOG_WARN&lt;&lt;</highlight><highlight class="stringliteral">&quot;Skipping<sp/>improper<sp/>metadata<sp/>string:<sp/>&apos;&quot;</highlight><highlight class="normal">&lt;&lt;metstr&lt;&lt;</highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>keystr<sp/>=<sp/>metstr.substr(0,equals);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>valstr<sp/>=<sp/>metstr.substr(equals+1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret.count(keystr)&gt;0){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RDLOG_WARN&lt;&lt;</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>key<sp/>&apos;&quot;</highlight><highlight class="normal">&lt;&lt;keystr&lt;&lt;</highlight><highlight class="stringliteral">&quot;&apos;<sp/>found<sp/>in<sp/>metadata.<sp/>Only<sp/>latter<sp/>value<sp/>will<sp/>be<sp/>kept.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>ret[keystr]<sp/>=<sp/>valstr;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="84" refid="classrichdem_1_1Array2D" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="86" refid="classrichdem_1_1Array2D_1a5be102099f10c85498753a2e2b58943a" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classrichdem_1_1Array2D_1a5be102099f10c85498753a2e2b58943a" kindref="member">filename</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87" refid="classrichdem_1_1Array2D_1af11077fd74c421f9c44b2526532032f7" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classrichdem_1_1Array2D_1af11077fd74c421f9c44b2526532032f7" kindref="member">basename</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88" refid="classrichdem_1_1Array2D_1a9d20128cc08bddb3a9abde87f83b6c94" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classrichdem_1_1Array2D_1a9d20128cc08bddb3a9abde87f83b6c94" kindref="member">geotransform</ref>;<sp/></highlight></codeline>
<codeline lineno="89" refid="classrichdem_1_1Array2D_1a307eeb12fe318485694245293715eb0a" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classrichdem_1_1Array2D_1a307eeb12fe318485694245293715eb0a" kindref="member">projection</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90" refid="classrichdem_1_1Array2D_1a8f8e1a249f95b716acf3ed3f46bd2727" refkind="member"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/><ref refid="classrichdem_1_1Array2D_1a8f8e1a249f95b716acf3ed3f46bd2727" kindref="member">metadata</ref>;<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Using<sp/>uint32_t<sp/>for<sp/>i-addressing<sp/>allows<sp/>for<sp/>rasters<sp/>of<sp/>~65535^2.<sp/>These<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//dimensions<sp/>fit<sp/>easily<sp/>within<sp/>an<sp/>int32_t<sp/>xy-address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int32_t<sp/><sp/><ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95" refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>i_t<sp/>NO_I<sp/>=<sp/>std::numeric_limits&lt;i_t&gt;::max();<sp/></highlight><highlight class="comment">//TODO:<sp/>What<sp/>is<sp/>this?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::array&lt;int,<sp/>9&gt;<sp/>_nshift;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="classrichdem_1_1ManagedVector" kindref="compound">ManagedVector&lt;T&gt;</ref><sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>T<sp/><sp/><sp/>no_data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>i_t<sp/>num_data_cells<sp/>=<sp/>NO_I;<sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>xy_t<sp/>view_width<sp/><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>xy_t<sp/>view_height<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>xy_t<sp/>view_xoff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>xy_t<sp/>view_yoff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>from_cache;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>USEGDAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loadGDAL(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename,<sp/>xy_t<sp/>xOffset=0,<sp/>xy_t<sp/>yOffset=0,<sp/>xy_t<sp/>part_width=0,<sp/>xy_t<sp/>part_height=0,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exact=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load_data=</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classrichdem_1_1Array2D_1add549f66e781b7a1e786e8d1104a0f09" kindref="member">empty</ref>());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>from_cache<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;filename<sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1a5be102099f10c85498753a2e2b58943a" kindref="member">filename</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>RDLOG_PROGRESS&lt;&lt;</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>open<sp/>file<sp/>&apos;&quot;</highlight><highlight class="normal">&lt;&lt;filename&lt;&lt;</highlight><highlight class="stringliteral">&quot;&apos;...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>GDALDataset<sp/>*fin<sp/>=<sp/>(GDALDataset*)GDALOpen(filename.c_str(),<sp/>GA_ReadOnly);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fin==NULL)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>file<sp/>&apos;&quot;</highlight><highlight class="normal">+filename+</highlight><highlight class="stringliteral">&quot;&apos;<sp/>with<sp/>GDAL!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>geotransform.resize(6);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fin-&gt;GetGeoTransform(geotransform.data())!=CE_None){</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RDLOG_WARN&lt;&lt;</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>a<sp/>geotransform<sp/>from<sp/>&apos;&quot;</highlight><highlight class="normal">&lt;&lt;filename&lt;&lt;</highlight><highlight class="stringliteral">&quot;&apos;!<sp/>Setting<sp/>to<sp/>an<sp/>arbitrary<sp/>standard<sp/>geotransform.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geotransform<sp/>=<sp/>{{1000.,<sp/>1.,<sp/>0.,<sp/>1000.,<sp/>0.,<sp/>-1.}};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>metadata<sp/>=<sp/>ProcessMetadata(fin-&gt;GetMetadata());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>projection_string=fin-&gt;GetProjectionRef();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>projection<sp/>=<sp/>std::string(projection_string);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>GDALRasterBand<sp/>*band<sp/>=<sp/>fin-&gt;GetRasterBand(1);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>total_width<sp/><sp/>=<sp/>band-&gt;GetXSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>an<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>total_height<sp/>=<sp/>band-&gt;GetYSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>an<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>no_data<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>band-&gt;GetNoDataValue();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(exact<sp/>&amp;&amp;<sp/>(total_width-xOffset!=part_width<sp/>||<sp/>total_height-yOffset!=part_height))</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Tile<sp/>dimensions<sp/>did<sp/>not<sp/>match<sp/>expectations!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>What&apos;s<sp/>going<sp/>on<sp/>here?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xOffset+part_width&gt;=total_width)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>part_width<sp/><sp/>=<sp/>total_width-xOffset;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(yOffset+part_height&gt;=total_height)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>part_height<sp/>=<sp/>total_height-yOffset;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part_width==0)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>part_width<sp/>=<sp/>total_width;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>view_width<sp/>=<sp/>part_width;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part_height==0)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>part_height<sp/>=<sp/>total_height;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>view_height<sp/>=<sp/>part_height;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>view_xoff<sp/>=<sp/>xOffset;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>view_yoff<sp/>=<sp/>yOffset;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>GDALClose(fin);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(load_data)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a7e766a4b52d54748ef341c6c53f8c63b" kindref="member">loadData</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>USEGDAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>GDALDataType<sp/>myGDALType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NativeTypeToGDAL&lt;T&gt;();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>Should<sp/>save<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>saveToCache(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename){</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fstream<sp/>fout;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>from_cache<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;filename<sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1a5be102099f10c85498753a2e2b58943a" kindref="member">filename</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>fout.open(filename,<sp/>std::ios_base::binary<sp/>|<sp/>std::ios_base::out<sp/>|<sp/>std::ios::trunc);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fout.good())</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>cache<sp/>file<sp/>&apos;&quot;</highlight><highlight class="normal">+filename+</highlight><highlight class="stringliteral">&quot;&apos;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>WITH_COMPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::iostreams::filtering_ostream<sp/>out;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.push(boost::iostreams::zlib_compressor());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.push(fout);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;out<sp/>=<sp/>fout;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;view_height),<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(xy_t));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;view_width),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(xy_t));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;view_xoff),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(xy_t));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;view_yoff),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(xy_t));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;num_data_cells),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(i_t));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;no_data),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T<sp/><sp/>));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(geotransform.data()),<sp/>6*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string::size_type<sp/>projection_size<sp/>=<sp/>projection.size();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;projection_size),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::string::size_type));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(projection.data()),<sp/>projection.size()*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>char));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>out.write(reinterpret_cast&lt;const<sp/>char*&gt;(data.<ref refid="classrichdem_1_1ManagedVector_1a24c9b22b6ca110d41e965e0b1a12b83a" kindref="member">data</ref>()),<sp/><ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>()*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loadNative(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load_data=</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>fin(filename,<sp/>std::ios::in<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fin.good());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;filename<sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1a5be102099f10c85498753a2e2b58943a" kindref="member">filename</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>from_cache<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>WITH_COMPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::iostreams::filtering_istream<sp/>in;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in.push(boost::iostreams::zlib_decompressor());</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in.push(fin);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;in<sp/>=<sp/>fin;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(&amp;view_height),<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(xy_t));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(&amp;view_width),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(xy_t));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(&amp;view_xoff),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(xy_t));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(&amp;view_yoff),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(xy_t));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(&amp;num_data_cells),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(i_t));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(&amp;no_data),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T<sp/><sp/>));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>geotransform.resize(6);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(geotransform.data()),<sp/>6*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string::size_type<sp/>projection_size;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(&amp;projection_size),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::string::size_type));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>projection.resize(projection_size,</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(&amp;projection[0]),<sp/>projection.size()*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(load_data){</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" kindref="member">resize</ref>(view_width,view_height);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in.read(reinterpret_cast&lt;char*&gt;(data.<ref refid="classrichdem_1_1ManagedVector_1a24c9b22b6ca110d41e965e0b1a12b83a" kindref="member">data</ref>()),<sp/><ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>()*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>(){</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>USEGDAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>GDALAllRegister();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="classrichdem_1_1Array2D_1a761396d221d7291556c4d8c55dc47848" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a761396d221d7291556c4d8c55dc47848" kindref="member">Array2D</ref>(xy_t<sp/><ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>,<sp/>xy_t<sp/><ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val<sp/>=<sp/>T())<sp/>:<sp/><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>()<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" kindref="member">resize</ref>(width,height,val);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="classrichdem_1_1Array2D_1a1d590bcacc7559187afea1968b4162cd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a1d590bcacc7559187afea1968b4162cd" kindref="member">Array2D</ref>(T<sp/>*data0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>width,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>height)<sp/>:<sp/><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>()<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classrichdem_1_1ManagedVector" kindref="compound">ManagedVector&lt;T&gt;</ref>(data0,<sp/>width*<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>view_width<sp/><sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>view_height<sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>_nshift<sp/><sp/><sp/><sp/><sp/>=<sp/>{{0,-1,-width-1,-<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>,-width+1,1,width+1,<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>,width-1}};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="316" refid="classrichdem_1_1Array2D_1a148d77b06c27ecaee1609dd62e9aba35" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a148d77b06c27ecaee1609dd62e9aba35" kindref="member">Array2D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D&lt;U&gt;</ref><sp/>&amp;other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val=T())<sp/>:<sp/><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>()<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>view_width<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.view_width;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>view_height<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.view_height;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>view_xoff<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.view_xoff;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>view_yoff<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.view_yoff;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>geotransform<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1a9d20128cc08bddb3a9abde87f83b6c94" kindref="member">geotransform</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>metadata<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1a8f8e1a249f95b716acf3ed3f46bd2727" kindref="member">metadata</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>projection<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1a307eeb12fe318485694245293715eb0a" kindref="member">projection</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>basename<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1af11077fd74c421f9c44b2526532032f7" kindref="member">basename</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" kindref="member">resize</ref>(other.<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>(),<sp/>other.<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>(),<sp/>val);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename)<sp/>:<sp/>Array2D(filename,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0,0,0,0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="classrichdem_1_1Array2D_1a1b3a7a505460f34b3afc3081e5bb12f2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a1b3a7a505460f34b3afc3081e5bb12f2" kindref="member">Array2D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>native,<sp/>xy_t<sp/>xOffset=0,<sp/>xy_t<sp/>yOffset=0,<sp/>xy_t<sp/>part_width=0,<sp/>xy_t<sp/>part_height=0,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exact=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load_data=</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>:<sp/>Array2D()<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(native){</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loadNative(filename,<sp/>load_data);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>USEGDAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loadGDAL(filename,<sp/>xOffset,<sp/>yOffset,<sp/>part_width,<sp/>part_height,<sp/>exact,<sp/>load_data);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RichDEM<sp/>was<sp/>not<sp/>compiled<sp/>with<sp/>GDAL!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCacheFilename(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename){</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;filename<sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1a5be102099f10c85498753a2e2b58943a" kindref="member">filename</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="classrichdem_1_1Array2D_1aa3007abe1173f11a4d4d61ec0ec01987" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1aa3007abe1173f11a4d4d61ec0ec01987" kindref="member">dumpData</ref>(){</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>saveToCache(filename);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1aacd29d414b7407af6b29bd1f4bb92a7a" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="classrichdem_1_1Array2D_1a7e766a4b52d54748ef341c6c53f8c63b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a7e766a4b52d54748ef341c6c53f8c63b" kindref="member">loadData</ref>()<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!data.<ref refid="classrichdem_1_1ManagedVector_1a0c7347cc8f769de977d375ad65e30d01" kindref="member">empty</ref>())</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Data<sp/>already<sp/>loaded!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from_cache){</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loadNative(filename,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>USEGDAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GDALDataset<sp/>*fin<sp/>=<sp/>(GDALDataset*)GDALOpen(filename.c_str(),<sp/>GA_ReadOnly);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fin==NULL)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>loadData()<sp/>into<sp/>tile<sp/>from<sp/>&apos;&quot;</highlight><highlight class="normal">+filename+</highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GDALRasterBand<sp/>*band<sp/>=<sp/>fin-&gt;GetRasterBand(1);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" kindref="member">resize</ref>(view_width,view_height);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>band-&gt;RasterIO(<sp/>GF_Read,<sp/>view_xoff,<sp/>view_yoff,<sp/>view_width,<sp/>view_height,<sp/>data.<ref refid="classrichdem_1_1ManagedVector_1a24c9b22b6ca110d41e965e0b1a12b83a" kindref="member">data</ref>(),<sp/>view_width,<sp/>view_height,<sp/>myGDALType(),<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(temp!=CE_None)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;An<sp/>error<sp/>occured<sp/>while<sp/>trying<sp/>to<sp/>read<sp/>&apos;&quot;</highlight><highlight class="normal">+filename+</highlight><highlight class="stringliteral">&quot;&apos;<sp/>into<sp/>RAM<sp/>with<sp/>GDAL.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GDALClose(fin);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RichDEM<sp/>was<sp/>not<sp/>compiled<sp/>with<sp/>GDAL!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="classrichdem_1_1Array2D_1aabd697e3bd2323b724814cbd7a4e30aa" refkind="member"><highlight class="normal"><sp/><sp/>T*<sp/><ref refid="classrichdem_1_1Array2D_1aabd697e3bd2323b724814cbd7a4e30aa" kindref="member">getData</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data.<ref refid="classrichdem_1_1ManagedVector_1a24c9b22b6ca110d41e965e0b1a12b83a" kindref="member">data</ref>();<sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" refkind="member"><highlight class="normal"><sp/><sp/>i_t<sp/><ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view_width*view_height;<sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" refkind="member"><highlight class="normal"><sp/><sp/>xy_t<sp/><ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view_width;<sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" refkind="member"><highlight class="normal"><sp/><sp/>xy_t<sp/><ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view_height;<sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="classrichdem_1_1Array2D_1ae005cc46a59116f73d140ac14d5488e7" refkind="member"><highlight class="normal"><sp/><sp/>xy_t<sp/><ref refid="classrichdem_1_1Array2D_1ae005cc46a59116f73d140ac14d5488e7" kindref="member">viewXoff</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view_xoff;<sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="classrichdem_1_1Array2D_1a7881aac04d3ae1595dfe225822eb8a9b" refkind="member"><highlight class="normal"><sp/><sp/>xy_t<sp/><ref refid="classrichdem_1_1Array2D_1a7881aac04d3ae1595dfe225822eb8a9b" kindref="member">viewYoff</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view_yoff;<sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="classrichdem_1_1Array2D_1add549f66e781b7a1e786e8d1104a0f09" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1add549f66e781b7a1e786e8d1104a0f09" kindref="member">empty</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data.<ref refid="classrichdem_1_1ManagedVector_1a0c7347cc8f769de977d375ad65e30d01" kindref="member">empty</ref>();<sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="classrichdem_1_1Array2D_1a80cb5415f73417724bb7fee3da21303a" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classrichdem_1_1Array2D_1a80cb5415f73417724bb7fee3da21303a" kindref="member">noData</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>no_data;<sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="classrichdem_1_1Array2D_1ac26c2f3badff22a291a612009244200c" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classrichdem_1_1Array2D_1ac26c2f3badff22a291a612009244200c" kindref="member">min</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>minval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>();i++){</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data[i]==no_data)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minval<sp/>=<sp/>std::min(minval,data[i]);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minval;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="classrichdem_1_1Array2D_1ae70941b33bafded93cf902039176ea79" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classrichdem_1_1Array2D_1ae70941b33bafded93cf902039176ea79" kindref="member">max</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>();i++){</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data[i]==no_data)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxval<sp/>=<sp/>std::max(maxval,data[i]);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxval;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="classrichdem_1_1Array2D_1a2889163cf327d0a6fc35642c9dad0928" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a2889163cf327d0a6fc35642c9dad0928" kindref="member">replace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>oldval,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>newval){</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>();i++)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data[i]==oldval)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>newval;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="classrichdem_1_1Array2D_1aa378b43240a65521db793d3abcc9d251" refkind="member"><highlight class="normal"><sp/><sp/>i_t<sp/><ref refid="classrichdem_1_1Array2D_1aa378b43240a65521db793d3abcc9d251" kindref="member">countval</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>Warn<sp/>if<sp/>raster<sp/>is<sp/>empty?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>i_t<sp/>count=0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>();i++)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data[i]==val)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>i_t<sp/>i0()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i_t)0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="classrichdem_1_1Array2D_1a9405a874e0e6e8745eec19c191f92ce7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a9405a874e0e6e8745eec19c191f92ce7" kindref="member">iToxy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>i_t<sp/>i,<sp/>xy_t<sp/>&amp;x,<sp/>xy_t<sp/>&amp;y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>i%view_width;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>i/view_width;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>i_t<sp/><ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i_t)y*(<ref refid="classrichdem_1_1Array2D_1ad40dc9595d88463c1904fbabc0b8d513" kindref="member">i_t</ref>)view_width+(i_t)x;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="classrichdem_1_1Array2D_1a2f3777d7d025150940044de05b78657c" refkind="member"><highlight class="normal"><sp/><sp/>i_t<sp/><ref refid="classrichdem_1_1Array2D_1a2f3777d7d025150940044de05b78657c" kindref="member">nToI</ref>(i_t<sp/>i,<sp/>xy_t<sp/>dx,<sp/>xy_t<sp/>dy)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>x=i%view_width+dx;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>y=i/view_width+dy;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x&lt;0<sp/>||<sp/>y&lt;0<sp/>||<sp/>x&gt;=view_width<sp/>||<sp/>y&gt;=view_height)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO_I;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="classrichdem_1_1Array2D_1a87d2eb11c2403184eed1c00803252380" refkind="member"><highlight class="normal"><sp/><sp/>i_t<sp/><ref refid="classrichdem_1_1Array2D_1a87d2eb11c2403184eed1c00803252380" kindref="member">getN</ref>(i_t<sp/>i,<sp/>uint8_t<sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0&lt;=n<sp/>&amp;&amp;<sp/>n&lt;=8);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>x<sp/>=<sp/>i%view_width+(<ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref>)<ref refid="constants_8hpp_1aa5b197c553cb75cc5bed18478bbeab41" kindref="member">dx</ref>[n];</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>y<sp/>=<sp/>i/view_width+(<ref refid="classrichdem_1_1Array2D_1a4bd7775bf275d5920a9db993cc945111" kindref="member">xy_t</ref>)<ref refid="constants_8hpp_1a8eee3f4a3891f1bd2c44ce2df9df4fb6" kindref="member">dy</ref>[n];</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x&lt;0<sp/>||<sp/>y&lt;0<sp/>||<sp/>x&gt;=view_width<sp/>||<sp/>y&gt;=view_height)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO_I;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="classrichdem_1_1Array2D_1ae3b8fe4e4eca43b6c5d0a173af238a84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1ae3b8fe4e4eca43b6c5d0a173af238a84" kindref="member">nshift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0&lt;=n<sp/>&amp;&amp;<sp/>n&lt;=8);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_nshift[n];</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="classrichdem_1_1Array2D_1a59f8c3c430d4a88772cd40ebccaded11" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a59f8c3c430d4a88772cd40ebccaded11" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D&lt;T&gt;</ref><sp/>&amp;o)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>()!=o.<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>()<sp/>||<sp/><ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>()!=o.<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>())</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classrichdem_1_1Array2D_1a80cb5415f73417724bb7fee3da21303a" kindref="member">noData</ref>()!=o.<ref refid="classrichdem_1_1Array2D_1a80cb5415f73417724bb7fee3da21303a" kindref="member">noData</ref>())</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;o.<ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>();i++)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data[i]!=o.data[i])</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="classrichdem_1_1Array2D_1a2d89b410c05e05e7586bda960f4fafac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a2d89b410c05e05e7586bda960f4fafac" kindref="member">isNoData</ref>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0&lt;=x<sp/>&amp;&amp;<sp/>x&lt;view_width);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0&lt;=y<sp/>&amp;&amp;<sp/>y&lt;view_height);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)]==no_data;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="classrichdem_1_1Array2D_1acaa72479b0c3c611e8762ee64efeaaa2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1acaa72479b0c3c611e8762ee64efeaaa2" kindref="member">isNoData</ref>(i_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0&lt;=i<sp/>&amp;&amp;<sp/>i&lt;<ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[i]==no_data;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="592" refid="classrichdem_1_1Array2D_1aaea204e9cb9d9663a00c6d4911dbafed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1aaea204e9cb9d9663a00c6d4911dbafed" kindref="member">flipVert</ref>(){</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>y=0;y&lt;view_height/2;y++)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>x=0;x&lt;view_width;x++)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)],<sp/>data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,view_height-1-y)]);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="601" refid="classrichdem_1_1Array2D_1a5bfd9ca5e365960be0971c5b904cbccd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a5bfd9ca5e365960be0971c5b904cbccd" kindref="member">flipHorz</ref>(){</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>y=0;y&lt;view_height;y++){</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>start<sp/>=<sp/>&amp;data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(0,y)];</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>end<sp/><sp/><sp/>=<sp/>&amp;data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(view_width,y)];</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(start&lt;end){</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(*start,*end);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start++;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end--;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="616" refid="classrichdem_1_1Array2D_1a689b51dff70e674f35d2624c8d84700a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a689b51dff70e674f35d2624c8d84700a" kindref="member">transpose</ref>(){</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>RDLOG_WARN&lt;&lt;</highlight><highlight class="stringliteral">&quot;transpose()<sp/>is<sp/>an<sp/>experimental<sp/>feature.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>new_data(view_width*view_height);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>y=0;y&lt;view_height;y++)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>x=0;x&lt;view_width;x++)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(data[(i_t)x*(i_t)view_height+(i_t)y],<sp/>data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)]);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(view_width,view_height);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>Offsets?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="634" refid="classrichdem_1_1Array2D_1abf160c36c4e75a94e959c0e77472989c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1abf160c36c4e75a94e959c0e77472989c" kindref="member">inGrid</ref>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0&lt;=x<sp/>&amp;&amp;<sp/>x&lt;view_width<sp/>&amp;&amp;<sp/>0&lt;=y<sp/>&amp;&amp;<sp/>y&lt;view_height;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/><sp/>@brief<sp/>Test<sp/>whether<sp/>a<sp/>cell<sp/>lies<sp/>within<sp/>the<sp/>boundaries<sp/>of<sp/>the<sp/>raster.</highlight></codeline>
<codeline lineno="640"><highlight class="comment"></highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/><sp/><sp/>Obviously<sp/>this<sp/>bears<sp/>some<sp/>difference<sp/>from<sp/>`inGrid(x,y)`.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"></highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/>@param[in]<sp/><sp/>i<sp/><sp/><sp/>i-coordinate<sp/>of<sp/>cell<sp/>to<sp/>test</highlight></codeline>
<codeline lineno="644"><highlight class="comment"></highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/><sp/>@return<sp/>TRUE<sp/>if<sp/>cell<sp/>lies<sp/>within<sp/>the<sp/>raster</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bool<sp/>inGrid(i_t<sp/>i)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>0&lt;=i<sp/>&amp;&amp;<sp/>i&lt;size();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="classrichdem_1_1Array2D_1a0d245ac081a32e941191149031558e8e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a0d245ac081a32e941191149031558e8e" kindref="member">isEdgeCell</ref>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x==0<sp/>||<sp/>y==0<sp/>||<sp/>x==view_width-1<sp/>||<sp/>y==view_height-1;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="classrichdem_1_1Array2D_1afd028c2d49f45bfc0974f5ae0e83452c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1afd028c2d49f45bfc0974f5ae0e83452c" kindref="member">isTopLeft</ref><sp/><sp/><sp/><sp/>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x==0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>y==0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668" refid="classrichdem_1_1Array2D_1a8a2aa1e0f5db61e06fc69f8551652c05" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a8a2aa1e0f5db61e06fc69f8551652c05" kindref="member">isTopRight</ref><sp/><sp/><sp/>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x==<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>()-1<sp/>&amp;&amp;<sp/>y==0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671" refid="classrichdem_1_1Array2D_1a3a86cbdbdc7f70fee0e9436b0972b431" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a3a86cbdbdc7f70fee0e9436b0972b431" kindref="member">isBottomLeft</ref><sp/>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x==0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>y==<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>()-1;<sp/>}</highlight></codeline>
<codeline lineno="674" refid="classrichdem_1_1Array2D_1adfe6bb9a8defab262aec8c8bafc9d780" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1adfe6bb9a8defab262aec8c8bafc9d780" kindref="member">isBottomRight</ref>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x==<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>()-1<sp/>&amp;&amp;<sp/>y==<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>()-1;<sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="678" refid="classrichdem_1_1Array2D_1a8bd97837e201f46929de98733027118e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a8bd97837e201f46929de98733027118e" kindref="member">isTopRow</ref><sp/><sp/><sp/><sp/>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y==0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681" refid="classrichdem_1_1Array2D_1a234360f3e3f805e5ed7ef5102b7af5cf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a234360f3e3f805e5ed7ef5102b7af5cf" kindref="member">isBottomRow</ref><sp/>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y==<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>()-1;<sp/>}</highlight></codeline>
<codeline lineno="684" refid="classrichdem_1_1Array2D_1a6112a72471f0c1bf68c68bfabbe59af0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a6112a72471f0c1bf68c68bfabbe59af0" kindref="member">isLeftCol</ref><sp/><sp/><sp/>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x==0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687" refid="classrichdem_1_1Array2D_1ad33b684114d99deb09706c169ec413d6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1ad33b684114d99deb09706c169ec413d6" kindref="member">isRightCol</ref><sp/><sp/>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x==<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>()-1;<sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="696" refid="classrichdem_1_1Array2D_1aa27ebf4ce083ee507aa896c440fc4f67" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1aa27ebf4ce083ee507aa896c440fc4f67" kindref="member">isEdgeCell</ref>(i_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>x,y;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a9405a874e0e6e8745eec19c191f92ce7" kindref="member">iToxy</ref>(i,x,y);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a0d245ac081a32e941191149031558e8e" kindref="member">isEdgeCell</ref>(x,y);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="classrichdem_1_1Array2D_1a4fa61164507a4b9215e10102337bd784" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a4fa61164507a4b9215e10102337bd784" kindref="member">setNoData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;ndval){</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>no_data<sp/>=<sp/>ndval;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="716" refid="classrichdem_1_1Array2D_1ac4557b9827f5cdb390697611c4a64b2d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1ac4557b9827f5cdb390697611c4a64b2d" kindref="member">setAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val){</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i_t<sp/>i=0;i&lt;<ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>();i++)</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" kindref="member">resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>width0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>height0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val0<sp/>=<sp/>T()){</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>data.resize(width0*height0);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>_nshift<sp/><sp/><sp/><sp/><sp/>=<sp/>{{0,-1,-width0-1,-width0,-width0+1,1,width0+1,width0,width0-1}};</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>view_width<sp/><sp/>=<sp/>width0;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>view_height<sp/>=<sp/>height0;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1ac4557b9827f5cdb390697611c4a64b2d" kindref="member">setAll</ref>(val0);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/>@brief<sp/>Resize<sp/>a<sp/>raster<sp/>to<sp/>copy<sp/>another<sp/>raster&apos;s<sp/>dimensions.<sp/>Copy<sp/>properies.</highlight></codeline>
<codeline lineno="742"><highlight class="comment"></highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/>@param[in]<sp/><sp/><sp/>other<sp/><sp/><sp/><sp/>Raster<sp/>to<sp/>match<sp/>sizes<sp/>with</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/>@param[in]<sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>to<sp/>set<sp/>all<sp/>the<sp/>cells<sp/>to.<sp/>Defaults<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raster&apos;s<sp/>template<sp/>type<sp/>default<sp/>value</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" kindref="member">resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D&lt;U&gt;</ref><sp/>&amp;other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val<sp/>=<sp/>T()){</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" kindref="member">resize</ref>(other.<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>(),<sp/>other.<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>(),<sp/>val);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>geotransform<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1a9d20128cc08bddb3a9abde87f83b6c94" kindref="member">geotransform</ref>;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>projection<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1a307eeb12fe318485694245293715eb0a" kindref="member">projection</ref>;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="765" refid="classrichdem_1_1Array2D_1accac03eeaa78b7fdffc1d205df0eea27" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1accac03eeaa78b7fdffc1d205df0eea27" kindref="member">expand</ref>(xy_t<sp/>new_width,<sp/>xy_t<sp/>new_height,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val){</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>RDLOG_DEBUG&lt;&lt;</highlight><highlight class="stringliteral">&quot;Array2D::expand(width,height,val)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_width==view_width<sp/>&amp;&amp;<sp/>new_height==view_height)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!owned())</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RichDEM<sp/>can<sp/>only<sp/>expand<sp/>memory<sp/>it<sp/>owns!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_width&lt;view_width)</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;expand():<sp/>new_width&lt;view_width&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_height&lt;view_height)</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;expand():<sp/>new_height&lt;view_height&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>old_width<sp/><sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>old_height<sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>();</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_data<sp/>=<sp/>std::move(data);<sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>gets<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>old<sp/>data<sp/>before<sp/>it<sp/>is<sp/>replaced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a4baf4116eb21f3588877dfd0d0613aa2" kindref="member">resize</ref>(new_width,new_height,val);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>y=0;y&lt;old_height;y++)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>x=0;x&lt;old_width;x++)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[y*new_width+x]<sp/>=<sp/>old_data[y*old_width+x];</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="793" refid="classrichdem_1_1Array2D_1a7952f4d55b0c3d4eb3a07c53ee216f2a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a7952f4d55b0c3d4eb3a07c53ee216f2a" kindref="member">countDataCells</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>num_data_cells<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>();i++)</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data[i]!=no_data)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_data_cells++;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="805" refid="classrichdem_1_1Array2D_1ac6e1f8d41a25c5dabfbe82483f5dec90" refkind="member"><highlight class="normal"><sp/><sp/>i_t<sp/><ref refid="classrichdem_1_1Array2D_1ac6e1f8d41a25c5dabfbe82483f5dec90" kindref="member">numDataCells</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_data_cells==NO_I)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrichdem_1_1Array2D_1a7952f4d55b0c3d4eb3a07c53ee216f2a" kindref="member">countDataCells</ref>();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_data_cells;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="818" refid="classrichdem_1_1Array2D_1a5853fbe67189c15a11d962607f05d0cb" refkind="member"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="classrichdem_1_1Array2D_1a5853fbe67189c15a11d962607f05d0cb" kindref="member">operator()</ref>(i_t<sp/>i){</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i&gt;=0);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i&lt;(i_t)view_width*view_height);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[i];</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="831" refid="classrichdem_1_1Array2D_1ae8d34b43a02ca85c0d29497b6833d1ad" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classrichdem_1_1Array2D_1ae8d34b43a02ca85c0d29497b6833d1ad" kindref="member">operator()</ref>(i_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i&gt;=0);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i&lt;(i_t)view_width*view_height);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[i];</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="845" refid="classrichdem_1_1Array2D_1a3038dcec904dee5d9eaa760c7326f04b" refkind="member"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="classrichdem_1_1Array2D_1a3038dcec904dee5d9eaa760c7326f04b" kindref="member">operator()</ref>(xy_t<sp/>x,<sp/>xy_t<sp/>y){</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x&gt;=0);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(y&gt;=0);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x&lt;<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>());</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(y&lt;<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>());</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)];</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="861" refid="classrichdem_1_1Array2D_1a17d5c67b382a19d1ef2030e64d058878" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classrichdem_1_1Array2D_1a17d5c67b382a19d1ef2030e64d058878" kindref="member">operator()</ref>(xy_t<sp/>x,<sp/>xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x&gt;=0);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(y&gt;=0);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x&lt;<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>());</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(y&lt;<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>());</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)];</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="874" refid="classrichdem_1_1Array2D_1abc210a9b2a1d59cceb4018cd2256356d" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrichdem_1_1Array2D_1abc210a9b2a1d59cceb4018cd2256356d" kindref="member">topRow</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1ae566470fdd3726b00a6bea17d47f1b80" kindref="member">getRowData</ref>(0);<sp/><sp/></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="883" refid="classrichdem_1_1Array2D_1a9ac61a350f4f349480280832f755c8a9" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrichdem_1_1Array2D_1a9ac61a350f4f349480280832f755c8a9" kindref="member">bottomRow</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1ae566470fdd3726b00a6bea17d47f1b80" kindref="member">getRowData</ref>(view_height-1);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="894" refid="classrichdem_1_1Array2D_1a4f48cfe4696c64a7d4129ae8a9d6e6f0" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrichdem_1_1Array2D_1a4f48cfe4696c64a7d4129ae8a9d6e6f0" kindref="member">leftColumn</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a7744909fe63a6fde0f764ff3f73de1de" kindref="member">getColData</ref>(0);<sp/></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="905" refid="classrichdem_1_1Array2D_1a423ac5ee3aaa60210250970af2909ba0" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrichdem_1_1Array2D_1a423ac5ee3aaa60210250970af2909ba0" kindref="member">rightColumn</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a7744909fe63a6fde0f764ff3f73de1de" kindref="member">getColData</ref>(view_width-1);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="915" refid="classrichdem_1_1Array2D_1ae1e38dacbe0c9c19a011bcc6e3b8008f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1ae1e38dacbe0c9c19a011bcc6e3b8008f" kindref="member">setRow</ref>(xy_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;val){</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>x=0;x&lt;view_width;x++)</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="926" refid="classrichdem_1_1Array2D_1a82d17862c97bf7009650cbe7c8c2fb07" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a82d17862c97bf7009650cbe7c8c2fb07" kindref="member">setCol</ref>(xy_t<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;val){</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>y=0;y&lt;view_height;y++)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="classrichdem_1_1Array2D_1ae566470fdd3726b00a6bea17d47f1b80" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrichdem_1_1Array2D_1ae566470fdd3726b00a6bea17d47f1b80" kindref="member">getRowData</ref>(xy_t<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;(data.<ref refid="classrichdem_1_1ManagedVector_1a24c9b22b6ca110d41e965e0b1a12b83a" kindref="member">data</ref>()+<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(0,y),data.<ref refid="classrichdem_1_1ManagedVector_1a24c9b22b6ca110d41e965e0b1a12b83a" kindref="member">data</ref>()+<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(0,y)+view_width);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="949" refid="classrichdem_1_1Array2D_1a7744909fe63a6fde0f764ff3f73de1de" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrichdem_1_1Array2D_1a7744909fe63a6fde0f764ff3f73de1de" kindref="member">getColData</ref>(xy_t<sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>temp(view_height);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>y=0;y&lt;view_height;y++)</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp[y]=data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)];</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="classrichdem_1_1Array2D_1aacd29d414b7407af6b29bd1f4bb92a7a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1aacd29d414b7407af6b29bd1f4bb92a7a" kindref="member">clear</ref>(){</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/><ref refid="classrichdem_1_1ManagedVector" kindref="compound">ManagedVector&lt;T&gt;</ref>();</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="967" refid="classrichdem_1_1Array2D_1a096db974fe765563929ee9802a37ec3e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a096db974fe765563929ee9802a37ec3e" kindref="member">templateCopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D" kindref="compound">Array2D&lt;U&gt;</ref><sp/>&amp;other){</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>geotransform<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1a9d20128cc08bddb3a9abde87f83b6c94" kindref="member">geotransform</ref>;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>projection<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1a307eeb12fe318485694245293715eb0a" kindref="member">projection</ref>;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>basename<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1af11077fd74c421f9c44b2526532032f7" kindref="member">basename</ref>;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>metadata<sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classrichdem_1_1Array2D_1a8f8e1a249f95b716acf3ed3f46bd2727" kindref="member">metadata</ref>;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>USEGDAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>saveGDAL(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;metadata_str=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>xy_t<sp/>xoffset=0,<sp/>xy_t<sp/>yoffset=0,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compress=</highlight><highlight class="keyword">false</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**papszOptions<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(compress){</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>papszOptions<sp/>=<sp/>CSLSetNameValue(<sp/>papszOptions,<sp/></highlight><highlight class="stringliteral">&quot;COMPRESS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DEFLATE&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>papszOptions<sp/>=<sp/>CSLSetNameValue(<sp/>papszOptions,<sp/></highlight><highlight class="stringliteral">&quot;ZLEVEL&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>GDALDriver<sp/>*poDriver<sp/>=<sp/>GetGDALDriverManager()-&gt;GetDriverByName(</highlight><highlight class="stringliteral">&quot;GTiff&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(poDriver==NULL)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>GDAL<sp/>driver!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>GDALDataset<sp/>*fout<sp/><sp/><sp/><sp/>=<sp/>poDriver-&gt;Create(filename.c_str(),<sp/><ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>(),<sp/><ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>(),<sp/>1,<sp/>myGDALType(),<sp/>papszOptions);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fout==NULL)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>file<sp/>&apos;&quot;</highlight><highlight class="normal">+filename+</highlight><highlight class="stringliteral">&quot;&apos;<sp/>for<sp/>GDAL<sp/>save!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>GDALRasterBand<sp/>*oband<sp/>=<sp/>fout-&gt;GetRasterBand(1);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>oband-&gt;SetNoDataValue(no_data);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>could<sp/>be<sp/>used<sp/>to<sp/>copy<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//poDstDS-&gt;SetMetadata(<sp/>poSrcDS-&gt;GetMetadata()<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TIFFTAG_SOFTWARE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TIFFTAG_ARTIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::time_t<sp/>the_time<sp/>=<sp/>std::time(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>time_str[64];</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::strftime(time_str,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(time_str),<sp/></highlight><highlight class="stringliteral">&quot;%Y-%m-%d<sp/>%H:%M:%S<sp/>UTC&quot;</highlight><highlight class="normal">,<sp/>std::gmtime(&amp;the_time));</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fout-&gt;SetMetadataItem(</highlight><highlight class="stringliteral">&quot;TIFFTAG_DATETIME&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>time_str);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fout-&gt;SetMetadataItem(</highlight><highlight class="stringliteral">&quot;TIFFTAG_SOFTWARE&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><ref refid="version_8hpp_1aa2172aa0c68dee7c2f39761699305bc5" kindref="member">program_identifier</ref>.c_str());</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>`metadata_str`<sp/>may<sp/>need<sp/>removing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metadata[</highlight><highlight class="stringliteral">&quot;PROCESSING_HISTORY&quot;</highlight><highlight class="normal">]<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(time_str)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="version_8hpp_1aa2172aa0c68dee7c2f39761699305bc5" kindref="member">program_identifier</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!metadata.empty())</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metadata[</highlight><highlight class="stringliteral">&quot;PROCESSING_HISTORY&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>metadata_str;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metadata[</highlight><highlight class="stringliteral">&quot;PROCESSING_HISTORY&quot;</highlight><highlight class="normal">]<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Unspecified<sp/>Operation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;kv:<sp/>metadata)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fout-&gt;SetMetadataItem(kv.first.c_str(),<sp/>kv.second.c_str());</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>geotransform<sp/>maps<sp/>each<sp/>grid<sp/>cell<sp/>to<sp/>a<sp/>point<sp/>in<sp/>an<sp/>affine-transformed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//projection<sp/>of<sp/>the<sp/>actual<sp/>terrain.<sp/>The<sp/>geostransform<sp/>is<sp/>specified<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Xgeo<sp/>=<sp/>GT(0)<sp/>+<sp/>Xpixel*GT(1)<sp/>+<sp/>Yline*GT(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Ygeo<sp/>=<sp/>GT(3)<sp/>+<sp/>Xpixel*GT(4)<sp/>+<sp/>Yline*GT(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//In<sp/>case<sp/>of<sp/>north<sp/>up<sp/>images,<sp/>the<sp/>GT(2)<sp/>and<sp/>GT(4)<sp/>coefficients<sp/>are<sp/>zero,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>GT(1)<sp/>is<sp/>pixel<sp/>width,<sp/>and<sp/>GT(5)<sp/>is<sp/>pixel<sp/>height.<sp/>The<sp/>(GT(0),GT(3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//position<sp/>is<sp/>the<sp/>top<sp/>left<sp/>corner<sp/>of<sp/>the<sp/>top<sp/>left<sp/>pixel<sp/>of<sp/>the<sp/>raster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!geotransform.empty()){</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out_geotransform<sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1a9d20128cc08bddb3a9abde87f83b6c94" kindref="member">geotransform</ref>;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(out_geotransform.size()!=6)</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Geotransform<sp/>of<sp/>output<sp/>is<sp/>not<sp/>the<sp/>right<sp/>size.<sp/>Found<sp/>&quot;</highlight><highlight class="normal">+std::to_string(out_geotransform.size())+</highlight><highlight class="stringliteral">&quot;<sp/>expected<sp/>6.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>shift<sp/>the<sp/>top-left<sp/>pixel<sp/>of<sp/>hte<sp/>image<sp/>eastward<sp/>to<sp/>the<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//coordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_geotransform[0]<sp/>+=<sp/>xoffset*geotransform[1];</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>shift<sp/>the<sp/>top-left<sp/>pixel<sp/>of<sp/>the<sp/>image<sp/>southward<sp/>to<sp/>the<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//coordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_geotransform[3]<sp/>+=<sp/>yoffset*geotransform[5];</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fout-&gt;SetGeoTransform(out_geotransform.data());</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!projection.empty())</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fout-&gt;SetProjection(projection.c_str());</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RDLOG_DEBUG&lt;&lt;</highlight><highlight class="stringliteral">&quot;Filename:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::setw(20)&lt;&lt;filename&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>Xoffset:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::setw(6)&lt;&lt;xoffset&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>Yoffset:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::setw(6)&lt;&lt;yoffset&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>Geotrans0:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::setw(10)&lt;&lt;std::setprecision(10)&lt;&lt;std::fixed&lt;&lt;geotransform[0]&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>Geotrans3:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::setw(10)&lt;&lt;std::setprecision(10)&lt;&lt;std::fixed&lt;&lt;geotransform[3];</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>oband-&gt;RasterIO(GF_Write,<sp/>0,<sp/>0,<sp/>view_width,<sp/>view_height,<sp/>data.<ref refid="classrichdem_1_1ManagedVector_1a24c9b22b6ca110d41e965e0b1a12b83a" kindref="member">data</ref>(),<sp/>view_width,<sp/>view_height,<sp/>myGDALType(),<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(temp!=CE_None)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>writing<sp/>file<sp/>with<sp/>saveGDAL()!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>GDALClose(fout);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075" refid="classrichdem_1_1Array2D_1a163be51f60e717d0a24a823463bf09a8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a163be51f60e717d0a24a823463bf09a8" kindref="member">printStamp</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>,<sp/>std::string<sp/>msg=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>SHOW_STAMPS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>sx<sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>()/2;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>sy<sp/>=<sp/><ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>()/2;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(msg.size()&gt;0)</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;msg&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Stamp<sp/>for<sp/>basename=&apos;&quot;</highlight><highlight class="normal">&lt;&lt;basename</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;&apos;,<sp/>filename=&apos;&quot;</highlight><highlight class="normal">&lt;&lt;filename</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>USEGDAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;&apos;,<sp/>dtype=&quot;</highlight><highlight class="normal">&lt;&lt;GDALGetDataTypeName(myGDALType())</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>at<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;sx&lt;&lt;</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">&lt;&lt;sy&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>sxmax<sp/>=<sp/>std::min(<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>(),<sp/>sx+size);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>symax<sp/>=<sp/>std::min(<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>(),sy+size);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>y=sy;y&lt;symax;y++){</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>x=sx;x&lt;sxmax;x++)</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::setw(5)&lt;&lt;std::setprecision(3)&lt;&lt;(int)data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)]&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110" refid="classrichdem_1_1Array2D_1a5df6c0fe188199febdc7ebb3e8936773" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a5df6c0fe188199febdc7ebb3e8936773" kindref="member">printBlock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radius,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>x0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xy_t<sp/>y0,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>color=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>msg=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(msg.size()!=0)</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;msg&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>xmin<sp/>=<sp/>std::max(0,x0-radius);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>ymin<sp/>=<sp/>std::max(0,y0-radius);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>xmax<sp/>=<sp/>std::min(<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>(),x0+radius);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>xy_t<sp/>ymax<sp/>=<sp/>std::min(<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>(),y0+radius);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>y=ymin;y&lt;ymax;y++){</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>x=xmin;x&lt;xmax;x++){</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color<sp/>&amp;&amp;<sp/>x==x0<sp/>&amp;&amp;<sp/>y==y0)</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\033[92m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::setw(5)&lt;&lt;(int)data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)]&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color<sp/>&amp;&amp;<sp/>x==x0<sp/>&amp;&amp;<sp/>y==y0)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\033[39m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136" refid="classrichdem_1_1Array2D_1aa75024bda64d01337f7c9cad997b70d0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1aa75024bda64d01337f7c9cad997b70d0" kindref="member">printAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>msg=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!msg.empty())</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;msg&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>y=0;y&lt;<ref refid="classrichdem_1_1Array2D_1ab2e27ec2c5986596760a5256d92a2eb0" kindref="member">height</ref>();y++){</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(xy_t<sp/>x=0;x&lt;<ref refid="classrichdem_1_1Array2D_1ad4d72d15f5a6199631051038088bb306" kindref="member">width</ref>();x++)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::setw(5)&lt;&lt;data[<ref refid="classrichdem_1_1Array2D_1a6197b6cf8545ea48560755aad1c4a3ff" kindref="member">xyToI</ref>(x,y)]&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152" refid="classrichdem_1_1Array2D_1a96b0d0765e87542c9138b7cd29449ea3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a96b0d0765e87542c9138b7cd29449ea3" kindref="member">getCellArea</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(geotransform.size()&gt;0);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(geotransform[1]*geotransform[5]);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161" refid="classrichdem_1_1Array2D_1a33fb7dde408a1d4a49f6411417b4d725" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a33fb7dde408a1d4a49f6411417b4d725" kindref="member">getCellLengthX</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(geotransform.size()&gt;0);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(geotransform[1]);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170" refid="classrichdem_1_1Array2D_1a826b748b165583ae5d19aef06b8cbaf6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1a826b748b165583ae5d19aef06b8cbaf6" kindref="member">getCellLengthY</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(geotransform.size()&gt;0);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(geotransform[5]);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180" refid="classrichdem_1_1Array2D_1ad5b05b04051fb953d6c40e9453d60fc5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrichdem_1_1Array2D_1ad5b05b04051fb953d6c40e9453d60fc5" kindref="member">scale</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i_t<sp/>i=0;i&lt;<ref refid="classrichdem_1_1Array2D_1aa7c4661b81d89c5c8aaa549b105f63c5" kindref="member">size</ref>();i++)</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data[i]!=no_data)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>*=<sp/>x;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>owned()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data.<ref refid="classrichdem_1_1ManagedVector_1af91432fe168346fe0d572da276bb10a4" kindref="member">owned</ref>();</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/z/richdem/include/richdem/common/Array2D.hpp"/>
  </compounddef>
</doxygen>
